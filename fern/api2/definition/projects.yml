# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

services:
  http:
    ProjectsService:
      auth: true
      base-path: /projects
      endpoints:
        getProjectsProjectsGet:
          path: ""
          method: GET
          docs: Get details of all the projects associated to your user.
          display-name: Get Projects
          request:
            query-parameters:
              page: optional<integer>
              size: optional<integer>
              filter: optional<string>

        createProjectProjectsPost:
          path: ""
          method: POST
          docs: >-
            Create a new project on the Humanloop platform by defining inputs
            and outputs
            and associated users.
          display-name: Create Project
          request:
            body: ProjectRequest
          response: commons.ProjectResponse

        getProjectProjectsIdGet:
          path: /{id}
          method: GET
          docs: Get details of a specific project.
          display-name: Get Project
          path-parameters:
            id: integer
          response: commons.ProjectResponse

        updateProjectProjectsIdPut:
          path: /{id}
          method: PUT
          docs: >-
            Update the helper details of your project such as guidelines and
            descriptions.
          display-name: Update Project
          path-parameters:
            id: integer
          request:
            body: commons.ProjectUpdateRequest
          response: commons.ProjectResponse

        deleteProjectProjectsIdDelete:
          path: /{id}
          method: DELETE
          docs: Delete your project if it is no longer needed.
          display-name: Delete Project
          path-parameters:
            id: integer

        cloneProjectProjectsIdClonePost:
          path: /{id}/clone
          method: POST
          docs: >-
            Clone an existing project on the Humanloop platform with updated
            config.
            Currently this is aimed at the ability to quickly experiment with
            different
            configurations of a project. It does not yet support editing core
            aspects of the
            project such as input, output definitions and project data.
          display-name: Clone Project
          path-parameters:
            id: integer
          request:
            body: commons.ProjectUpdateRequest
          response: commons.ProjectResponse

        addDatasetProjectsIdDatasetsPost:
          path: /{id}/datasets
          method: POST
          docs: Add a dataset to the given project.
          display-name: Add Dataset
          path-parameters:
            id: integer
          request:
            body: AddDatasetRequest
          response: commons.ProjectResponse

        removeDatasetProjectsProjectIdDatasetsDatasetIdDelete:
          path: /{project_id}/datasets/{dataset_id}
          method: DELETE
          docs: Remove the given dataset from the given project.
          display-name: Remove Dataset
          path-parameters:
            project_id: integer
            dataset_id: integer

        createPredictionProjectsIdPredictPost:
          path: /{id}/predict
          method: POST
          docs: >-
            Use this endpoint to make a prediction on new data with your model.
            Provide a batch of data points that include the input fields
            required
            by your project to generate a batch of predictions with confidence
            scores from the
            latest version of your Humanloop AI model.
          display-name: Create Prediction
          path-parameters:
            id: integer
          request:
            body: PredictRequest
          response: list<commons.PredictResponse>

        createPredictionWithFallbackProjectsIdPredictWithFallbackPost:
          path: /{id}/predict-with-fallback
          method: POST
          docs: >-
            Use this endpoint to make a prediction on new or existing data with
            your latest Humanloop model.
            For existing data, provide a batch of data_ids.
            For new data, provide a batch of data points that include the input
            fields required by your project.
            To support fallback to a human for difficult examples you can set a
            confidence threshold.
            If the model's confidence is less than this threshold, a task will
            be routed
            to one of your project team members. To be notified of when the task
            has been completed, you must first have
            created a subscription to our task_completed event (see
            /subscriptions endpoint for more details).
            An array of predictions with confidence scores and the corresponding
            task details if relevant will be returned.
          display-name: Create Prediction With Fallback
          path-parameters:
            id: integer
          request:
            body: PredictWithFallbackRequest
          response: list<commons.PredictWithFallbackResponse>

        getProjectJobDetailsProjectsIdJobsGet:
          path: /{id}/jobs
          method: GET
          docs: >-
            Retrieve details of the long running/batched async jobs that have
            been
            triggered against this project historically.
            Use this endpoint to check the status of batch jobs for example,
            when waiting:
             - for batch predictions to complete across all existing data
             associated to a project.
             - for a model to re-train
             - for a model to re-rank the unlabelled data using active learning
          display-name: Get Project Job Details
          path-parameters:
            id: integer

        getLabelledDataProjectsIdLabelsGet:
          path: /{id}/labels
          method: GET
          docs: >-
            Download all the completed task data for your project - including
            all your user assignments and their annotations and details of which
            data points
            were used for training, validation and testing purposes.
          display-name: Get Labelled Data
          path-parameters:
            id: integer
          request:
            query-parameters:
              format: optional<string>

        getPaginatedProjectDataProjectsProjectIdDataGet:
          path: /{project_id}/data
          method: GET
          docs: >-
            Get a page of project data for a given project with corresponding
            task data.
            You must provide `page` and `size` parameters. Up to `size` records
            will be returned, starting from `page` * `size`.
          display-name: Get Paginated Project Data
          path-parameters:
            project_id: integer
          request:
            query-parameters:
              size: optional<integer>
              page: optional<integer>
              status: optional<string>
              flagged: optional<boolean>
              sort: optional<string>

        getModelStatisticsProjectsProjectIdStatsGet:
          path: /{project_id}/stats
          method: GET
          docs: >-
            Get detailed information on the performance of your projects model,
            including
            training, validation and test evaluation loss and evaluation data
            over time.
          display-name: Get Model Statistics
          path-parameters:
            project_id: integer
          response: list<commons.EvaluationResponse>

        getTaskSummaryStatisticsProjectsProjectIdTaskSummaryStatisticsGet:
          path: /{project_id}/task-summary-statistics
          method: GET
          docs: >-
            Get detailed task summary statistics for this project, including
            the number of flagged datapoints, the datapoint statuses, and a
            summary of
            overall datapoint task completion
          display-name: Get Task Summary Statistics
          path-parameters:
            project_id: integer

        triggerModelTrainingProjectsIdTrainPost:
          path: /{id}/train
          method: POST
          docs: >-
            Trigger your model to retrain against all your existing annotated
            data
          display-name: Trigger Model Training
          path-parameters:
            id: integer
          request:
            body: TrainerConfigRequest

types:
  ProjectRequest:
    properties:
      name: string
      outputs: list<commons.OutputRequest>
      inputs: list<commons.InputRequest>
      instructions: optional<string>
      guidelines: optional<string>
      description: optional<string>
      users: list<string>
      policy: optional<commons.Policy>
      task_allocation_strategy: optional<commons.TaskAllocationStrategy>
      task_allocation_batch_size: optional<integer>
      review_existing_annotations: optional<boolean>

  AddDatasetRequest:
    docs: Request model for adding a dataset to a project
    properties:
      dataset_id: integer
      inputs: list<commons.InputRequest>
      outputs: list<commons.OutputRequest>

  PredictRequest:
    properties:
      data: list<map<string, _InlinedType2>>
      n_best: optional<integer>
      save: optional<boolean>

  _InlinedType2: string

  PredictWithFallbackRequest:
    properties:
      data: list<unknown>
      data_ids: optional<list<integer>>
      n_best: optional<integer>
      batch_id: optional<string>
      confidence_threshold: optional<double>

  TrainerConfigRequest:
    properties:
      max_epochs: optional<integer>
      learning_rate: optional<double>
      reinitialise: optional<boolean>
