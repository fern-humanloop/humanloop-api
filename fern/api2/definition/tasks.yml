# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

services:
  http:
    TasksService:
      auth: true
      base-path: /projects/{id}
      path-parameters:
        id: integer
      endpoints:
        getTasksProjectsIdTasksGet:
          path: /tasks
          method: GET
          docs: >-
            Get all task data for a given project.
            You can provide different criteria to sort the response by as well
            as provide
            search words to filter the response by.
          display-name: Get Tasks
          request:
            query-parameters:
              size: optional<integer>
              page: optional<integer>
              complete: optional<boolean>
              flagged: optional<boolean>
              search_keywords: optional<string>
          response: list<commons.TaskResponse>

        createTasksProjectsIdTasksPost:
          path: /tasks
          method: POST
          docs: >-
            Add new tasks to your project for your team to annotate more data to
            help improve
            your models over time. If no user is provided, we automatically
            select a suitable user.
            Each task corresponds to a data point that requires annotation by a
            user.
            One data point can have more than one task associated to it in the
            case
            where multiple annotations from different users are required.
            If the data points provided when creating tasks do not yet exist in
            your
            associated dataset, we add them to the dataset automatically,
            otherwise we
            reference the existing data points.
            See our /subscriptions webhook docs for information setting up
            notifications
            for when tasks are created and completed.
          display-name: Create Tasks
          request:
            body: CreateTaskRequest

        getUserTasksProjectsIdUsersUserIdTasksGet:
          path: /users/{user_id}/tasks
          method: GET
          docs: >-
            Get all task data for a given user from a project.
            You can provide different criteria to sort the response by as well
            as provide
            search words to filter the response on.
          display-name: Get User Tasks
          path-parameters:
            user_id: integer
          request:
            query-parameters:
              size: optional<integer>
              page: optional<integer>
              complete: optional<boolean>
              flagged: optional<boolean>
              search_keywords: optional<string>

        getTaskProjectsIdTasksTaskIdGet:
          path: /tasks/{task_id}
          method: GET
          docs: Get details of a task.
          display-name: Get Task
          path-parameters:
            task_id: integer
          response: commons.TaskResponse

        updateTaskProjectsIdTasksTaskIdPut:
          path: /tasks/{task_id}
          method: PUT
          docs: >-
            Update a given task.
            If you provide annotations when updating a task and set the task as
            complete,
            these will be used as feedback to improve the performance of your
            model
            automatically.
            You can also update the user assignment of a task by providing the
            email_address
            of a user from your project.
          display-name: Update Task
          path-parameters:
            task_id: integer
          request:
            body: UpdateTaskRequest
          response: commons.TaskResponse

        deleteTaskProjectsIdTasksTaskIdDelete:
          path: /tasks/{task_id}
          method: DELETE
          docs: Delete a specific task.
          display-name: Delete Task
          path-parameters:
            task_id: integer

        createTasksForUserProjectsIdCreateTasksForUserPost:
          path: /create-tasks-for-user
          method: POST
          docs: >-
            Add new tasks for datapoints without any tasks for the specified
            user to annotate.
            Tasks are created preferentially for datapoints that will help the
            model
            the most (i.e. those with the highest active learning scores).
          display-name: Create Tasks For User
          request:
            body: CreateTasksForUserRequest
          response: CreateTasksForUserResponse

        bulkCreateTasksProjectsIdAddTasksPost:
          path: /add-tasks
          method: POST
          docs: >-
            Add new annotation tasks to your project to help improve your models
            over time.
            A more performant endpoint for Task creation suitable for batches of
            new data.
            This is a lighter weight version of the /projects/{id}/tasks
            endpoint, with the
            following differences in behaviour:
            - Assumes data does not exist and so does not perform de-dupe checks
            - Does not trigger the model to re-train
          display-name: Bulk Create Tasks
          request:
            body: CreateTaskBatchRequest

        reassignTasksProjectsIdReassignTasksPost:
          path: /reassign-tasks
          method: POST
          docs: >-
            Reassign a number of tasks from a source user to a target user.
            Care is taken to ensure that the target user does not receive new
            tasks for
            datapoints they have already annotated (or have incomplete tasks
            for).
            Returns the number of tasks successfully transferred, and the source
            and
            target users' task counts.
          display-name: Reassign Tasks
          request:
            body: ReassignTasksRequest
          response: ReassignTasksResponse

types:
  CreateTaskRequest:
    properties:
      data: list<unknown>
      user: optional<string>
      usage: optional<_InlinedType3>
      complete: optional<boolean>

  _InlinedType3:
    extends:
      - commons.ProjectDataUsage

  UpdateTaskRequest:
    properties:
      email_address: optional<string>
      flagged: optional<boolean>
      complete: optional<boolean>
      comment: optional<string>
      usage: optional<_InlinedType4>

  _InlinedType4:
    extends:
      - commons.ProjectDataUsage

  CreateTasksForUserRequest:
    properties:
      user: string
      datapoints: integer

  CreateTasksForUserResponse:
    properties:
      created_tasks: integer

  CreateTaskBatchRequest:
    properties:
      data: list<unknown>
      user: optional<string>
      usage: optional<_InlinedType5>
      complete: optional<boolean>

  _InlinedType5:
    extends:
      - commons.ProjectDataUsage

  ReassignTasksRequest:
    properties:
      source_user: string
      target_user: string
      tasks: integer

  ReassignTasksResponse:
    properties:
      reassigned_tasks: integer
