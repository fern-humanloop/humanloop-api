{
	"openapi": "3.0.2",
	"info": { "title": "FastAPI", "version": "0.1.0" },
	"paths": {
		"/token": {
			"post": {
				"tags": ["token"],
				"summary": "Login For Access Token",
				"description": "Validate a user exists with a valid password and return an access token used\nto authenticate with other subsequent API calls in a session.",
				"operationId": "login_for_access_token_token_post",
				"requestBody": {
					"content": {
						"application/x-www-form-urlencoded": {
							"schema": {
								"$ref": "#/components/schemas/Body_login_for_access_token_token_post"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/users/me": {
			"get": {
				"tags": ["users"],
				"summary": "Read User",
				"description": "Validate user exists with valid password and return access token",
				"operationId": "read_user_users_me_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserResponse" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"put": {
				"tags": ["users"],
				"summary": "Update Me",
				"description": "Update the profile of your current user",
				"operationId": "update_me_users_me_put",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UpdateUserRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/users": {
			"post": {
				"tags": ["users"],
				"summary": "Create User",
				"description": "Create a new user.",
				"operationId": "create_user_users_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/users/invite": {
			"post": {
				"tags": ["users"],
				"summary": "Invite User",
				"description": "Invite a user to your project using their email address. They will receive\nan email invite with a link to signup to Humanloop. When they log in they will\nthen see the project they have been invited to.",
				"operationId": "invite_user_users_invite_post",
				"parameters": [
					{
						"required": false,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "query"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserInviteRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/users/recover/{email}": {
			"post": {
				"tags": ["users"],
				"summary": "Recover Password",
				"description": "Trigger a password recovery email to be sent.",
				"operationId": "recover_password_users_recover__email__post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Email", "type": "string" },
						"name": "email",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/datasets": {
			"get": {
				"tags": ["datasets"],
				"summary": "Get Datasets",
				"description": "Get dataset details and associated field meta-data for any data-sets associated\nto your user.",
				"operationId": "get_datasets_datasets_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseList_DatasetResponse_"
								}
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["datasets"],
				"summary": "Create Dataset",
				"description": "Upload a dataset that you can use in your Humanloop projects to train models.",
				"operationId": "create_dataset_datasets_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/DataSetRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UpdateDataResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/datasets/{id}": {
			"get": {
				"tags": ["datasets"],
				"summary": "Get Dataset",
				"description": "Get dataset details and associated field meta-data for a specific data-set\nassociated to your user.",
				"operationId": "get_dataset_datasets__id__get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": false,
						"schema": {
							"title": "Num Records",
							"type": "integer",
							"default": 0
						},
						"name": "num_records",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DatasetResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"put": {
				"tags": ["datasets"],
				"summary": "Update Dataset",
				"description": "Update an existing dataset by adding additional data points.",
				"operationId": "update_dataset_datasets__id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UpdateDataSetRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UpdateDataResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["datasets"],
				"summary": "Delete Dataset",
				"description": "Delete your dataset if it is no longer needed.",
				"operationId": "delete_dataset_datasets__id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/datasets/{id}/metadata": {
			"put": {
				"tags": ["datasets"],
				"summary": "Update Dataset Details",
				"description": "Update the details of your dataset such as its name and description.",
				"operationId": "update_dataset_details_datasets__id__metadata_put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DatasetMetadataUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DatasetResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/datasets/{id}/data/{data_id}/file": {
			"get": {
				"tags": ["datasets"],
				"summary": "Get Dataset Data File",
				"description": "Get file for a data point.\n\nImplementation assumes each dataset can only have one file field.",
				"operationId": "get_dataset_data_file_datasets__id__data__data_id__file_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Data Id", "type": "integer" },
						"name": "data_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/pdf": {} }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Projects",
				"description": "Get details of all the projects associated to your user.",
				"operationId": "get_projects_projects_get",
				"parameters": [
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 10 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Filter", "type": "string" },
						"name": "filter",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"allOf": [{ "$ref": "#/components/schemas/ProjectSortBy" }],
							"default": "created_at"
						},
						"name": "sort_by",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"allOf": [{ "$ref": "#/components/schemas/SortOrder" }],
							"default": "desc"
						},
						"name": "order",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["projects"],
				"summary": "Create Project",
				"description": "Create a new project on the Humanloop platform by defining inputs and outputs\nand associated users.",
				"operationId": "create_project_projects_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ProjectRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ProjectResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Project",
				"description": "Get details of a specific project.",
				"operationId": "get_project_projects__id__get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ProjectResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"put": {
				"tags": ["projects"],
				"summary": "Update Project",
				"description": "Update the helper details of your project such as guidelines and descriptions.",
				"operationId": "update_project_projects__id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ProjectUpdateRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ProjectResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["projects"],
				"summary": "Delete Project",
				"description": "Delete your project if it is no longer needed.",
				"operationId": "delete_project_projects__id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/clone": {
			"post": {
				"tags": ["projects"],
				"summary": "Clone Project",
				"description": "Clone an existing project on the Humanloop platform with updated config.\n\nCurrently this is aimed at the ability to quickly experiment with different\nconfigurations of a project. It does not yet support editing core aspects of the\nproject such as input, output definitions and project data.",
				"operationId": "clone_project_projects__id__clone_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ProjectUpdateRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ProjectResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/datasets": {
			"post": {
				"tags": ["projects"],
				"summary": "Add Dataset",
				"description": "Add a dataset to the given project.",
				"operationId": "add_dataset_projects__id__datasets_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AddDatasetRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ProjectResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/datasets/{dataset_id}": {
			"delete": {
				"tags": ["projects"],
				"summary": "Remove Dataset",
				"description": "Remove the given dataset from the given project.",
				"operationId": "remove_dataset_projects__project_id__datasets__dataset_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "integer" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Dataset Id", "type": "integer" },
						"name": "dataset_id",
						"in": "path"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/predict": {
			"post": {
				"tags": ["projects"],
				"summary": "Create Prediction",
				"description": "Use this endpoint to make a prediction on new data with your model.\n\nProvide a batch of data points that include the input fields required\nby your project to generate a batch of predictions with confidence scores from the\nlatest version of your Humanloop AI model.",
				"operationId": "create_prediction_projects__id__predict_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PredictRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Create Prediction Projects  Id  Predict Post",
									"type": "array",
									"items": { "$ref": "#/components/schemas/PredictResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/predict-with-fallback": {
			"post": {
				"tags": ["projects"],
				"summary": "Create Prediction With Fallback",
				"description": "Use this endpoint to make a prediction on new or existing data with your latest Humanloop model.\n\nFor existing data, provide a batch of data_ids.\n\nFor new data, provide a batch of data points that include the input fields required by your project.\n\nTo support fallback to a human for difficult examples you can set a confidence threshold.\nIf the model's confidence is less than this threshold, a task will be routed\nto one of your project team members. To be notified of when the task has been completed, you must first have\ncreated a subscription to our task_completed event (see /subscriptions endpoint for more details).\n\nAn array of predictions with confidence scores and the corresponding task details if relevant will be returned.",
				"operationId": "create_prediction_with_fallback_projects__id__predict_with_fallback_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PredictWithFallbackRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Create Prediction With Fallback Projects  Id  Predict With Fallback Post",
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/PredictWithFallbackResponse"
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/jobs": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Project Job Details",
				"description": "Retrieve details of the long running/batched async jobs that have been\ntriggered against this project historically.\n\nUse this endpoint to check the status of batch jobs for example, when waiting:\n - for batch predictions to complete across all existing data\n associated to a project.\n - for a model to re-train\n - for a model to re-rank the unlabelled data using active learning",
				"operationId": "get_project_job_details_projects__id__jobs_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": false,
						"schema": {
							"allOf": [{ "$ref": "#/components/schemas/JobTypes" }],
							"default": "update_learner"
						},
						"name": "job_type",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/labels": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Labelled Data",
				"description": "Download all the completed task data for your project - including\nall your user assignments and their annotations and details of which data points\nwere used for training, validation and testing purposes.",
				"operationId": "get_labelled_data_projects__id__labels_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": false,
						"schema": {
							"title": "Format",
							"type": "string",
							"default": "json"
						},
						"name": "format",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/data": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Paginated Project Data",
				"description": "Get a page of project data for a given project with corresponding task data.\n\nYou must provide `page` and `size` parameters. Up to `size` records\nwill be returned, starting from `page` * `size`.",
				"operationId": "get_paginated_project_data_projects__project_id__data_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "integer" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 50 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "$ref": "#/components/schemas/ProjectDataStatus" },
						"name": "status",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Flagged", "type": "boolean" },
						"name": "flagged",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Sort",
							"type": "string",
							"default": "id_ASC"
						},
						"name": "sort",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/stats": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Model Statistics",
				"description": "Get detailed information on the performance of your projects model, including\ntraining, validation and test evaluation loss and evaluation data over time.",
				"operationId": "get_model_statistics_projects__project_id__stats_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "integer" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Model Statistics Projects  Project Id  Stats Get",
									"type": "array",
									"items": { "$ref": "#/components/schemas/EvaluationResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/task-summary-statistics": {
			"get": {
				"tags": ["projects"],
				"summary": "Get Task Summary Statistics",
				"description": "Get detailed task summary statistics for this project, including\nthe number of flagged datapoints, the datapoint statuses, and a summary of\noverall datapoint task completion",
				"operationId": "get_task_summary_statistics_projects__project_id__task_summary_statistics_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "integer" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/train": {
			"post": {
				"tags": ["projects"],
				"summary": "Trigger Model Training",
				"description": "Trigger your model to retrain against all your existing annotated data",
				"operationId": "trigger_model_training_projects__id__train_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/TrainerConfigRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/tasks": {
			"get": {
				"tags": ["tasks"],
				"summary": "Get Tasks",
				"description": "Get all task data for a given project.\n\nYou can provide different criteria to sort the response by as well as provide\nsearch words to filter the response by.",
				"operationId": "get_tasks_projects__id__tasks_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 5000 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Complete", "type": "boolean" },
						"name": "complete",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Flagged", "type": "boolean" },
						"name": "flagged",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"allOf": [{ "$ref": "#/components/schemas/TaskSortby" }],
							"default": "confusion"
						},
						"name": "sortby",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Search Keywords", "type": "string" },
						"name": "search_keywords",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Tasks Projects  Id  Tasks Get",
									"type": "array",
									"items": { "$ref": "#/components/schemas/TaskResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["tasks"],
				"summary": "Create Tasks",
				"description": "Add new tasks to your project for your team to annotate more data to help improve\nyour models over time. If no user is provided, we automatically select a suitable user.\n\nEach task corresponds to a data point that requires annotation by a user.\nOne data point can have more than one task associated to it in the case\nwhere multiple annotations from different users are required.\n\nIf the data points provided when creating tasks do not yet exist in your\nassociated dataset, we add them to the dataset automatically, otherwise we\nreference the existing data points.\n\nSee our /subscriptions webhook docs for information setting up notifications\nfor when tasks are created and completed.",
				"operationId": "create_tasks_projects__id__tasks_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CreateTaskRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/users/{user_id}/tasks": {
			"get": {
				"tags": ["tasks"],
				"summary": "Get User Tasks",
				"description": "Get all task data for a given user from a project.\n\nYou can provide different criteria to sort the response by as well as provide\nsearch words to filter the response on.",
				"operationId": "get_user_tasks_projects__id__users__user_id__tasks_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "User Id", "type": "integer" },
						"name": "user_id",
						"in": "path"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 50 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Complete", "type": "boolean" },
						"name": "complete",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Flagged", "type": "boolean" },
						"name": "flagged",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"allOf": [{ "$ref": "#/components/schemas/TaskSortby" }],
							"default": "confusion"
						},
						"name": "sortby",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Search Keywords", "type": "string" },
						"name": "search_keywords",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/tasks/{task_id}": {
			"get": {
				"tags": ["tasks"],
				"summary": "Get Task",
				"description": "Get details of a task.",
				"operationId": "get_task_projects__id__tasks__task_id__get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Task Id", "type": "integer" },
						"name": "task_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/TaskResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"put": {
				"tags": ["tasks"],
				"summary": "Update Task",
				"description": "Update a given task.\n\nIf you provide annotations when updating a task and set the task as complete,\nthese will be used as feedback to improve the performance of your model\nautomatically.\n\nYou can also update the user assignment of a task by providing the email_address\nof a user from your project.",
				"operationId": "update_task_projects__id__tasks__task_id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Task Id", "type": "integer" },
						"name": "task_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UpdateTaskRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/TaskResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["tasks"],
				"summary": "Delete Task",
				"description": "Delete a specific task.",
				"operationId": "delete_task_projects__id__tasks__task_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Task Id", "type": "integer" },
						"name": "task_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/create-tasks-for-user": {
			"post": {
				"tags": ["tasks"],
				"summary": "Create Tasks For User",
				"description": "Add new tasks for datapoints without any tasks for the specified user to annotate.\n\nTasks are created preferentially for datapoints that will help the model\nthe most (i.e. those with the highest active learning scores).",
				"operationId": "create_tasks_for_user_projects__id__create_tasks_for_user_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTasksForUserRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateTasksForUserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/add-tasks": {
			"post": {
				"tags": ["tasks"],
				"summary": "Bulk Create Tasks",
				"description": "Add new annotation tasks to your project to help improve your models over time.\n\nA more performant endpoint for Task creation suitable for batches of new data.\n\nThis is a lighter weight version of the /projects/{id}/tasks endpoint, with the\nfollowing differences in behaviour:\n- Assumes data does not exist and so does not perform de-dupe checks\n- Does not trigger the model to re-train",
				"operationId": "bulk_create_tasks_projects__id__add_tasks_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTaskBatchRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/reassign-tasks": {
			"post": {
				"tags": ["tasks"],
				"summary": "Reassign Tasks",
				"description": "Reassign a number of tasks from a source user to a target user.\n\nCare is taken to ensure that the target user does not receive new tasks for\ndatapoints they have already annotated (or have incomplete tasks for).\n\nReturns the number of tasks successfully transferred, and the source and\ntarget users' task counts.",
				"operationId": "reassign_tasks_projects__id__reassign_tasks_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ReassignTasksRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReassignTasksResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/outputs/{id}/labels": {
			"get": {
				"tags": ["labels"],
				"summary": "Get Labels",
				"description": "Get all labels for an existing project output definition",
				"operationId": "get_labels_outputs__id__labels_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Labels Outputs  Id  Labels Get",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"put": {
				"tags": ["labels"],
				"summary": "Update Labels",
				"description": "Update the data on an array of labels based on id",
				"operationId": "update_labels_outputs__id__labels_put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"title": "Label Updates",
								"type": "array",
								"items": { "$ref": "#/components/schemas/UpdateLabelRequest" }
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Update Labels Outputs  Id  Labels Put",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["labels"],
				"summary": "Add Labels",
				"description": "Add a label or list of labels to an existing project's output definition",
				"operationId": "add_labels_outputs__id__labels_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"title": "Label Data",
								"anyOf": [
									{
										"type": "array",
										"items": { "$ref": "#/components/schemas/AddLabelRequest" }
									},
									{ "$ref": "#/components/schemas/AddLabelRequest" }
								]
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Add Labels Outputs  Id  Labels Post",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["labels"],
				"summary": "Delete Labels",
				"operationId": "delete_labels_outputs__id__labels_delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"title": "Labels",
								"type": "array",
								"items": { "$ref": "#/components/schemas/UpdateLabelRequest" }
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Delete Labels Outputs  Id  Labels Delete",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/outputs/{id}/labels/{label_id}": {
			"put": {
				"tags": ["labels"],
				"summary": "Update Label",
				"description": "Update any of the data for an existing label with label_id",
				"operationId": "update_label_outputs__id__labels__label_id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Label Id", "type": "string" },
						"name": "label_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UpdateLabelRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Update Label Outputs  Id  Labels  Label Id  Put",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["labels"],
				"summary": "Delete Label",
				"operationId": "delete_label_outputs__id__labels__label_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Label Id" },
						"name": "label_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Delete Label Outputs  Id  Labels  Label Id  Delete",
									"type": "array",
									"items": { "$ref": "#/components/schemas/LabelResponse" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/annotations": {
			"get": {
				"tags": ["annotations"],
				"summary": "Get Annotations",
				"description": "Get a page of annotations data for a given project.\n\nThis endpoint works like `/tasks`, but you must provide\n`page` and `size` parameters. Up to `size` records\nwill be returned, starting from `page` * `size`.\n\nuser relates to user.full_name.",
				"operationId": "get_annotations_annotations_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "integer" },
						"name": "project_id",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 50 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Complete", "type": "boolean" },
						"name": "complete",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Flagged", "type": "boolean" },
						"name": "flagged",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Reviewed", "type": "boolean" },
						"name": "reviewed",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "User", "type": "string" },
						"name": "user",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Keywords", "type": "string" },
						"name": "keywords",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Labels",
							"type": "array",
							"items": { "type": "string" }
						},
						"name": "labels",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Task Id", "type": "integer" },
						"name": "task_id",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["annotations"],
				"summary": "Create Annotation",
				"description": "Create an annotation",
				"operationId": "create_annotation_annotations_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAnnotationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/annotations/{annotation_id}": {
			"put": {
				"tags": ["annotations"],
				"summary": "Upsert Annotation",
				"description": "Create or update an annotation.\n\nThis endpoint is only used for single-label classification.",
				"operationId": "upsert_annotation_annotations__annotation_id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Annotation Id", "type": "string" },
						"name": "annotation_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpsertAnnotationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["annotations"],
				"summary": "Delete Annotation",
				"description": "Delete a given annotation",
				"operationId": "delete_annotation_annotations__annotation_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Annotation Id", "type": "string" },
						"name": "annotation_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"patch": {
				"tags": ["annotations"],
				"summary": "Update Annotation",
				"description": "Update a given annotation.",
				"operationId": "update_annotation_annotations__annotation_id__patch",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Annotation Id", "type": "string" },
						"name": "annotation_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateAnnotationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AnnotationResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/subscriptions": {
			"get": {
				"tags": ["subscriptions"],
				"summary": "Get Subscriptions",
				"description": "Get a list of all subscriptions for a given project.",
				"operationId": "get_subscriptions_projects__id__subscriptions_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["subscriptions"],
				"summary": "Create Subscription",
				"description": "Add a subscription to a project to get notifications for events of interest such\nas when a task has been completed.",
				"operationId": "create_subscription_projects__id__subscriptions_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/SubRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/subscriptions/{sub_id}": {
			"put": {
				"tags": ["subscriptions"],
				"summary": "Update Subscription",
				"description": "Update an existing subscription. This is useful if you want to change\ncallback details.",
				"operationId": "update_subscription_projects__id__subscriptions__sub_id__put",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Sub Id", "type": "string" },
						"name": "sub_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/SubRequest" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["subscriptions"],
				"summary": "Deactivate Subscription",
				"description": "Deactivate an existing subscription, which will result in you no longer\nreceiving notifications from the events associated to this subscription.",
				"operationId": "deactivate_subscription_projects__id__subscriptions__sub_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Sub Id", "type": "string" },
						"name": "sub_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{id}/subscriptions/{sub_id}/test": {
			"post": {
				"tags": ["subscriptions"],
				"summary": "Test Subscription",
				"description": "Test a subscription.\n\nPosting to this endpoint using the test_message query param will trigger\na test notification from the Humanloop platform to the subscriptions\ncallback url.",
				"operationId": "test_subscription_projects__id__subscriptions__sub_id__test_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Id", "type": "integer" },
						"name": "id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Sub Id", "type": "string" },
						"name": "sub_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Test Message", "type": "string" },
						"name": "test_message",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/logs": {
			"get": {
				"tags": ["monitoring"],
				"summary": "Get Logs",
				"description": "Retrieve paginated logs from the server.\n\nSorting and filtering are supported through query params.\nSee docstring of get_sorted_filtered_project_data_from_query_params for more details.",
				"operationId": "get_logs_logs_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Search", "type": "string" },
						"name": "search",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Metadata Search", "type": "string" },
						"name": "metadata_search",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Start Date",
							"type": "string",
							"format": "date"
						},
						"name": "start_date",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "End Date",
							"type": "string",
							"format": "date"
						},
						"name": "end_date",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Size", "type": "integer", "default": 50 },
						"name": "size",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Page", "type": "integer", "default": 0 },
						"name": "page",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedData_LogResponse_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"delete": {
				"tags": ["monitoring"],
				"summary": "Delete Logs",
				"operationId": "delete_logs_logs_delete",
				"parameters": [
					{
						"required": false,
						"schema": {
							"title": "Id",
							"type": "array",
							"items": { "type": "string" }
						},
						"name": "id",
						"in": "query"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/logs/export-raw": {
			"post": {
				"tags": ["monitoring"],
				"summary": "Export Raw",
				"description": "Retrieve filtered logs in a normalized CSV.\n\nSorting and filtering are supported through query params.\nSee docstring of get_sorted_filtered_project_data_from_query_params for more details.",
				"operationId": "export_raw_logs_export_raw_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Search", "type": "string" },
						"name": "search",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Metadata Search", "type": "string" },
						"name": "metadata_search",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Start Date",
							"type": "string",
							"format": "date"
						},
						"name": "start_date",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "End Date",
							"type": "string",
							"format": "date"
						},
						"name": "end_date",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/logs/export-fine-tune": {
			"post": {
				"tags": ["monitoring"],
				"summary": "Export Fine Tune",
				"description": "Retrieve filtered logs in the format for fine-tuning.\n\nSorting and filtering are supported through query params.\nSee docstring of get_sorted_filtered_project_data_from_query_params for more details.",
				"operationId": "export_fine_tune_logs_export_fine_tune_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Search", "type": "string" },
						"name": "search",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Metadata Search", "type": "string" },
						"name": "metadata_search",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Start Date",
							"type": "string",
							"format": "date"
						},
						"name": "start_date",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "End Date",
							"type": "string",
							"format": "date"
						},
						"name": "end_date",
						"in": "query"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/FineTuneFormatting" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "application/json": { "schema": {} } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/feedback/{feedback_type}/{feedback_value}": {
			"delete": {
				"tags": ["monitoring"],
				"summary": "Delete Feedback Label",
				"operationId": "delete_feedback_label_projects__project_id__feedback__feedback_type___feedback_value__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Feedback Type", "type": "string" },
						"name": "feedback_type",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Feedback Value", "type": "string" },
						"name": "feedback_value",
						"in": "path"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/model-configs": {
			"get": {
				"tags": ["model-configuration"],
				"summary": "Get Project Model Configs",
				"description": "Get an array of model_configs associated to your project",
				"operationId": "get_project_model_configs_projects__project_id__model_configs_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Project Model Configs Projects  Project Id  Model Configs Get",
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ProjectModelConfigResponse"
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/model-configs/{model_config_id}": {
			"delete": {
				"tags": ["model-configuration"],
				"summary": "Delete Project Model Config",
				"description": "Delete a model configuration from your project.",
				"operationId": "delete_project_model_config_projects__project_id__model_configs__model_config_id__delete",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Model Config Id", "type": "string" },
						"name": "model_config_id",
						"in": "path"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"patch": {
				"tags": ["model-configuration"],
				"summary": "Update Project Model Config",
				"description": "Update a model configuration within your project",
				"operationId": "update_project_model_config_projects__project_id__model_configs__model_config_id__patch",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Model Config Id", "type": "string" },
						"name": "model_config_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateProjectModelConfigRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProjectModelConfigResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/metrics/logs": {
			"get": {
				"tags": ["metrics"],
				"summary": "Get Sample Logs",
				"operationId": "get_sample_logs_projects__project_id__metrics_logs_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Sample Logs Projects  Project Id  Metrics Logs Get",
									"type": "array",
									"items": { "type": "object" }
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/metrics/{metric_id}/run": {
			"post": {
				"tags": ["metrics"],
				"summary": "Run Metric Calculations",
				"description": "Calculate metrics across all data in project.",
				"operationId": "run_metric_calculations_projects__project_id__metrics__metric_id__run_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Metric Id", "type": "string" },
						"name": "metric_id",
						"in": "path"
					}
				],
				"responses": {
					"204": { "description": "Successful Response" },
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/model-config-metrics": {
			"get": {
				"tags": ["metrics"],
				"summary": "Get Metrics For Model Configs",
				"operationId": "get_metrics_for_model_configs_projects__project_id__model_config_metrics_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Metrics For Model Configs Projects  Project Id  Model Config Metrics Get",
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModelConfigMetricsResponse"
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/fine-tune": {
			"post": {
				"tags": ["models"],
				"summary": "Fine Tune",
				"description": "Trigger the fine-tuning process for a specific base model and data snapshot.",
				"operationId": "fine_tune_projects__project_id__fine_tune_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateFineTunedModelRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FineTunedModelResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/models/fine-tuned": {
			"get": {
				"tags": ["models"],
				"summary": "Get Fine Tuned Models",
				"description": "Get a list of all fine-tuned models associated to a given project.",
				"operationId": "get_fine_tuned_models_projects__project_id__models_fine_tuned_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Fine Tuned Models Projects  Project Id  Models Fine Tuned Get",
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/FineTunedModelResponse"
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/models/fine-tuned/update": {
			"post": {
				"tags": ["models"],
				"summary": "Update Fine Tuned Models",
				"description": "Updates your fine-tuned models.\n\nUses the specified provider API keys for provider-specific details.",
				"operationId": "update_fine_tuned_models_projects__project_id__models_fine_tuned_update_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateFineTunedModelsRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateFineTunedModelsResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/models/fine-tuned/{id}": {
			"patch": {
				"tags": ["models"],
				"summary": "Update Fine Tuned Model",
				"description": "Modifies user-specified attributes of the specified fine-tuned models.",
				"operationId": "update_fine_tuned_model_projects__project_id__models_fine_tuned__id__patch",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Id", "type": "string" },
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateFineTunedModelRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FineTunedModelResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/data-snapshots": {
			"get": {
				"tags": ["Data snapshot"],
				"summary": "Get Project Data Snapshots",
				"operationId": "get_project_data_snapshots_projects__project_id__data_snapshots_get",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"title": "Response Get Project Data Snapshots Projects  Project Id  Data Snapshots Get",
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/DataSnapshotResponse"
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			},
			"post": {
				"tags": ["Data snapshot"],
				"summary": "Create Data Snapshot",
				"operationId": "create_data_snapshot_projects__project_id__data_snapshots_post",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": false,
						"schema": { "title": "Search", "type": "string" },
						"name": "search",
						"in": "query"
					},
					{
						"required": false,
						"schema": { "title": "Metadata Search", "type": "string" },
						"name": "metadata_search",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "Start Date",
							"type": "string",
							"format": "date"
						},
						"name": "start_date",
						"in": "query"
					},
					{
						"required": false,
						"schema": {
							"title": "End Date",
							"type": "string",
							"format": "date"
						},
						"name": "end_date",
						"in": "query"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataSnapshotCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSnapshotResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		},
		"/projects/{project_id}/data-snapshots/{data_snapshot_id}": {
			"patch": {
				"tags": ["Data snapshot"],
				"summary": "Update Data Snapshot",
				"operationId": "update_data_snapshot_projects__project_id__data_snapshots__data_snapshot_id__patch",
				"parameters": [
					{
						"required": true,
						"schema": { "title": "Project Id", "type": "string" },
						"name": "project_id",
						"in": "path"
					},
					{
						"required": true,
						"schema": { "title": "Data Snapshot Id", "type": "string" },
						"name": "data_snapshot_id",
						"in": "path"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataSnapshotUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSnapshotResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [
					{ "OAuth2PasswordBearerHeaderOrCookie": [] },
					{ "APIKeyHeader": [] }
				]
			}
		}
	},
	"components": {
		"schemas": {
			"AddDatasetRequest": {
				"title": "AddDatasetRequest",
				"required": ["dataset_id", "inputs", "outputs"],
				"type": "object",
				"properties": {
					"dataset_id": {
						"title": "ID of the dataset to add",
						"type": "integer"
					},
					"inputs": {
						"title": "Inputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/InputRequest" }
					},
					"outputs": {
						"title": "Outputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/OutputRequest" }
					}
				},
				"description": "Request model for adding a dataset to a project"
			},
			"AddLabelRequest": {
				"title": "AddLabelRequest",
				"required": ["name"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				},
				"description": "Data required when adding a label"
			},
			"AnnotationResponse": {
				"title": "AnnotationResponse",
				"required": [
					"id",
					"external_id",
					"user",
					"task",
					"label_id",
					"label",
					"result_type",
					"inputs"
				],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of this annotation", "type": "string" },
					"external_id": {
						"title": "The ID of this annotation",
						"type": "string"
					},
					"confidence": {
						"title": "A confidence score for the annotation",
						"type": "number"
					},
					"user": {
						"title": "The user who created this annotation",
						"allOf": [{ "$ref": "#/components/schemas/AnnotationUserResponse" }]
					},
					"task": {
						"title": "The task this annotation belongs to",
						"allOf": [{ "$ref": "#/components/schemas/AnnotationTaskResponse" }]
					},
					"start": {
						"title": "Start character index of the span in the parent document.",
						"type": "integer"
					},
					"end": {
						"title": "End character index of the span in the parent document.",
						"type": "integer"
					},
					"text": {
						"title": "Text the annotation covers if applicable",
						"type": "string"
					},
					"strength": {
						"title": "Strength of the annotation's association with its label",
						"type": "number"
					},
					"label_id": {
						"title": "The id of the chosen label for the output value",
						"type": "string"
					},
					"label": {
						"title": "The chosen label for the output value.",
						"allOf": [{ "$ref": "#/components/schemas/LabelResponse" }]
					},
					"result_type": {
						"title": "The type of the annotation (span or classification)",
						"type": "string"
					},
					"inputs": {
						"title": "The input data this annotation applies to",
						"type": "object"
					},
					"reviewed": {
						"title": "Whether this annotation has been reviewed",
						"type": "boolean"
					}
				},
				"description": "An instance of a user-provided annotation"
			},
			"AnnotationTaskResponse": {
				"title": "AnnotationTaskResponse",
				"required": ["id"],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of the task", "type": "integer" },
					"url": { "title": "The URL of the task", "type": "string" }
				},
				"description": "An instance of a task the annotation was created for"
			},
			"AnnotationUserResponse": {
				"title": "AnnotationUserResponse",
				"required": ["id", "username", "email_address"],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of the user", "type": "integer" },
					"username": { "title": "The username of the user", "type": "string" },
					"full_name": {
						"title": "The full name of the user",
						"type": "string"
					},
					"email_address": {
						"title": "The email address of the user",
						"type": "string"
					}
				},
				"description": "An instance of the user who made an annotation"
			},
			"Body_login_for_access_token_token_post": {
				"title": "Body_login_for_access_token_token_post",
				"required": ["username", "password"],
				"type": "object",
				"properties": {
					"grant_type": {
						"title": "Grant Type",
						"pattern": "password",
						"type": "string"
					},
					"username": { "title": "Username", "type": "string" },
					"password": { "title": "Password", "type": "string" },
					"scope": { "title": "Scope", "type": "string", "default": "" },
					"client_id": { "title": "Client Id", "type": "string" },
					"client_secret": { "title": "Client Secret", "type": "string" }
				}
			},
			"ClassBreakdown": {
				"title": "ClassBreakdown",
				"required": ["precision", "recall", "f1-score", "support"],
				"type": "object",
				"properties": {
					"precision": { "title": "Precision", "type": "number" },
					"recall": { "title": "Recall", "type": "number" },
					"f1-score": { "title": "F1-Score", "type": "number" },
					"support": { "title": "Support", "type": "integer" }
				}
			},
			"Classification": {
				"title": "Classification",
				"required": ["label"],
				"type": "object",
				"properties": {
					"label": {
						"title": "The name of the chosen label for the output value.",
						"type": "string"
					},
					"confidence": {
						"title": "A confidence score for the output value.",
						"type": "number"
					},
					"strength": {
						"title": "The strength with which this output value is associated with the label.",
						"type": "number"
					},
					"id": {
						"title": "Unique identifier for the classification value.",
						"type": "string"
					},
					"object": {
						"title": "Object",
						"type": "string",
						"default": "classification"
					}
				},
				"description": "An instance of a classification for an output"
			},
			"CreateAnnotationRequest": {
				"title": "CreateAnnotationRequest",
				"required": ["task_id"],
				"type": "object",
				"properties": {
					"task_id": {
						"title": "ID of the annotation's task",
						"type": "integer"
					},
					"external_id": {
						"title": "ID of the annotation to create",
						"type": "string"
					},
					"label_id": {
						"title": "ID of the annotation's label",
						"type": "string"
					},
					"start": {
						"title": "Start offset of the annotation (span only)",
						"type": "integer"
					},
					"end": {
						"title": "End offset of the annotation (span only)",
						"type": "integer"
					},
					"text": {
						"title": "The text the annotation covers (span only)",
						"type": "string"
					},
					"strength": {
						"title": "strength of the association with the annotation's label (ordinal regression only)",
						"type": "number"
					}
				}
			},
			"CreateFineTunedModelRequest": {
				"title": "CreateFineTunedModelRequest",
				"required": ["name", "data_snapshot", "config", "provider_api_keys"],
				"type": "object",
				"properties": {
					"name": {
						"title": "Fine-tune run name",
						"type": "string",
						"description": "User defined friendly name for a fine-tuning run"
					},
					"data_snapshot": {
						"title": "Data snapshot ID",
						"type": "string",
						"description": "ID of immutable data snapshot used for fine-tuning"
					},
					"config": {
						"title": "Fine-tuning config",
						"allOf": [{ "$ref": "#/components/schemas/FineTuneConfig" }],
						"description": "Configuration and hyper-parameters for the fine-tuning process"
					},
					"metadata": {
						"title": "Metadata",
						"type": "object",
						"description": "Any additional metadata that you would like to log for reference."
					},
					"provider_api_keys": {
						"title": "Provider API Keys",
						"allOf": [{ "$ref": "#/components/schemas/ProviderApiKeys" }],
						"description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop."
					}
				}
			},
			"CreateTaskBatchRequest": {
				"title": "CreateTaskBatchRequest",
				"required": ["data"],
				"type": "object",
				"properties": {
					"data": {
						"title": "An array of data containing the input fields and optionally the output fields defined by your project. Include the output fields if you have existing annotations available.You can also include any additional key-value meta-data you wish to record for a task such as your document ids.",
						"type": "array",
						"items": {
							"type": "object",
							"additionalProperties": {
								"anyOf": [
									{ "type": "integer" },
									{ "type": "string" },
									{ "type": "number" },
									{ "type": "array", "items": { "type": "object" } },
									{ "type": "array", "items": { "type": "string" } }
								]
							}
						},
						"example": [
							{ "text": "Your document data...", "external_id": "123" }
						]
					},
					"user": {
						"title": "The email address of the user to assign the batch of tasks to.",
						"type": "string"
					},
					"usage": {
						"title": "Specify if the associated datapoint and annotations for this task should be used for model training, validation or testing. If this is notspecified Humanloop will determine the usage automatically.",
						"allOf": [{ "$ref": "#/components/schemas/ProjectDataUsage" }]
					},
					"complete": {
						"title": "By default if the datapoint associated to a task has a valid annotation defined on creation the task will automatically be marked as complete so it used for model training. This field allows you to mark tasks with annotations defined as incomplete so that it is added to the queue for review by an annotator user before being used for model training.",
						"type": "boolean"
					}
				}
			},
			"CreateTaskRequest": {
				"title": "CreateTaskRequest",
				"required": ["data"],
				"type": "object",
				"properties": {
					"data": {
						"title": "An array of data containing the input fields defined by your project and any additional key-value meta-data you wish to record for a task such as your document ids.",
						"type": "array",
						"items": {
							"type": "object",
							"additionalProperties": {
								"anyOf": [
									{ "type": "integer" },
									{ "type": "string" },
									{ "type": "number" },
									{ "type": "array", "items": { "type": "object" } },
									{ "type": "array", "items": { "type": "string" } }
								]
							}
						},
						"example": [
							{ "text": "Your document data...", "external_id": "123" }
						]
					},
					"user": {
						"title": "The email address of the user to assign the new task to.",
						"type": "string"
					},
					"usage": {
						"title": "Specify if the associated datapoint and annotations for this task should be used for model training, validation or testing. If this is notspecified Humanloop will determine the usage automatically.",
						"allOf": [{ "$ref": "#/components/schemas/ProjectDataUsage" }]
					},
					"complete": {
						"title": "By default if the datapoint associated to a task has a valid annotation defined on creation the task will automatically be marked as complete so it used for model training. This field allows you to mark tasks with annotations defined as incomplete so that it is added to the queue for review before being used for model training.",
						"type": "boolean"
					}
				}
			},
			"CreateTasksForUserRequest": {
				"title": "CreateTasksForUserRequest",
				"required": ["user", "datapoints"],
				"type": "object",
				"properties": {
					"user": {
						"title": "The email address of the user to assign the new tasks to. Note that other users may also receive tasks to satisfy the project's annotation policy.",
						"type": "string"
					},
					"datapoints": {
						"title": "Number of datapoints to create tasks for.",
						"type": "integer"
					}
				}
			},
			"CreateTasksForUserResponse": {
				"title": "CreateTasksForUserResponse",
				"required": ["created_tasks"],
				"type": "object",
				"properties": {
					"created_tasks": { "title": "Created Tasks", "type": "integer" }
				}
			},
			"DataProcessingStatus": {
				"title": "DataProcessingStatus",
				"enum": ["processing", "completed", "failed"],
				"type": "string",
				"description": "An enumeration."
			},
			"DataRequest": {
				"title": "DataRequest",
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{ "type": "string" },
						{ "type": "number" },
						{ "type": "array", "items": { "type": "string" } },
						{
							"type": "array",
							"items": { "$ref": "#/components/schemas/Span" }
						},
						{
							"type": "array",
							"items": { "$ref": "#/components/schemas/Classification" }
						}
					]
				}
			},
			"DataResponse": {
				"title": "DataResponse",
				"required": ["id", "values", "source", "processing_status"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"dataset_id": { "title": "Dataset Id", "type": "integer" },
					"values": { "title": "Values", "type": "object" },
					"source": { "title": "Source", "type": "string" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"processing_status": {
						"$ref": "#/components/schemas/DataProcessingStatus"
					}
				}
			},
			"DataSetRequest": {
				"title": "DataSetRequest",
				"required": ["name", "data", "fields"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"data": {
						"title": "Data",
						"type": "array",
						"items": { "$ref": "#/components/schemas/DataRequest" }
					},
					"fields": {
						"title": "Fields",
						"type": "array",
						"items": { "$ref": "#/components/schemas/FieldRequest" }
					},
					"description": { "title": "Description", "type": "string" }
				}
			},
			"DataSnapshotCreateRequest": {
				"title": "DataSnapshotCreateRequest",
				"required": ["name"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				}
			},
			"DataSnapshotResponse": {
				"title": "DataSnapshotResponse",
				"required": [
					"id",
					"name",
					"filter_params",
					"count",
					"created_at",
					"updated_at"
				],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "string" },
					"name": { "title": "Name", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"filter_params": { "title": "Filter Params", "type": "object" },
					"count": { "title": "Count", "type": "integer" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"DataSnapshotUpdateRequest": {
				"title": "DataSnapshotUpdateRequest",
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				}
			},
			"DataSource": {
				"title": "DataSource",
				"required": ["field_id"],
				"type": "object",
				"properties": {
					"field_id": {
						"title": "The associated dataset field_id to link to your project input",
						"type": "integer"
					}
				}
			},
			"DataTypes": {
				"title": "DataTypes",
				"enum": [
					"text",
					"categorical",
					"multi_categorical",
					"quantitative",
					"character_offsets",
					"url",
					"ordinal_regression",
					"file_pdf"
				],
				"type": "string",
				"description": "An enumeration."
			},
			"DatasetMetadataUpdateRequest": {
				"title": "DatasetMetadataUpdateRequest",
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				}
			},
			"DatasetResponse": {
				"title": "DatasetResponse",
				"required": ["id", "name", "count", "active"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"count": { "title": "Count", "type": "integer" },
					"data": {
						"title": "Data",
						"type": "array",
						"items": { "$ref": "#/components/schemas/DataResponse" }
					},
					"description": { "title": "Description", "type": "string" },
					"public": { "title": "Public", "type": "boolean" },
					"fields": {
						"title": "Fields",
						"type": "array",
						"items": { "$ref": "#/components/schemas/FieldResponse" }
					},
					"field_names": {
						"title": "Field Names",
						"type": "array",
						"items": { "type": "string" }
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"status_counts": {
						"title": "Status Counts",
						"type": "object",
						"additionalProperties": { "type": "integer" }
					},
					"active": { "title": "Active", "type": "boolean" }
				}
			},
			"EvalItem": {
				"title": "EvalItem",
				"required": [
					"main_score",
					"accuracy",
					"macro_f_score",
					"micro_f_score",
					"class_breakdown"
				],
				"type": "object",
				"properties": {
					"main_score": { "title": "Main Score", "type": "number" },
					"accuracy": { "title": "Accuracy", "type": "number" },
					"macro_f_score": { "title": "Macro F Score", "type": "number" },
					"micro_f_score": { "title": "Micro F Score", "type": "number" },
					"class_breakdown": {
						"title": "Class Breakdown",
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/ClassBreakdown"
						}
					}
				}
			},
			"EvalMetrics": {
				"title": "EvalMetrics",
				"required": [
					"train_loss",
					"dev_loss",
					"test_loss",
					"train_eval",
					"dev_eval",
					"test_eval",
					"learning_rate",
					"num_labels"
				],
				"type": "object",
				"properties": {
					"train_loss": {
						"title": "Train Loss",
						"type": "array",
						"items": { "type": "number" }
					},
					"dev_loss": {
						"title": "Dev Loss",
						"type": "array",
						"items": { "type": "number" }
					},
					"test_loss": {
						"title": "Test Loss",
						"type": "array",
						"items": { "type": "number" }
					},
					"train_eval": {
						"title": "Train Eval",
						"type": "array",
						"items": { "$ref": "#/components/schemas/EvalItem" }
					},
					"dev_eval": {
						"title": "Dev Eval",
						"type": "array",
						"items": { "$ref": "#/components/schemas/EvalItem" }
					},
					"test_eval": {
						"title": "Test Eval",
						"type": "array",
						"items": { "$ref": "#/components/schemas/EvalItem" }
					},
					"learning_rate": {
						"title": "Learning Rate",
						"type": "array",
						"items": { "type": "number" }
					},
					"test_score": { "title": "Test Score", "type": "number" },
					"num_labels": { "title": "Num Labels", "type": "integer" }
				}
			},
			"EvaluationResponse": {
				"title": "EvaluationResponse",
				"required": ["id", "learner_id", "eval_metrics", "created_at"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"learner_id": { "title": "Learner Id", "type": "integer" },
					"eval_metrics": { "$ref": "#/components/schemas/EvalMetrics" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"Event": {
				"title": "Event",
				"enum": ["task.completed", "task.created"],
				"type": "string",
				"description": "Events users of Humanloop can subscribe to "
			},
			"FeedbackResponse": {
				"title": "FeedbackResponse",
				"required": ["type", "value", "id"],
				"type": "object",
				"properties": {
					"type": {
						"title": "Feedback type",
						"anyOf": [
							{ "$ref": "#/components/schemas/FeedbackType" },
							{ "type": "string" }
						],
						"description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
					},
					"value": {
						"title": "Feedback value",
						"type": "string",
						"description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'."
					},
					"data_id": {
						"title": "Datapoint ID",
						"type": "string",
						"description": "ID to associate the feedback to a previously logged datapoint.When providing instant feedback as part of the hl.log(...) call you don't need to provide a data_id."
					},
					"user": {
						"title": "User",
						"type": "string",
						"description": "A unique identifier to who provided the feedback. This gets passed through to the provider as required."
					},
					"created_at": {
						"title": "Created at",
						"type": "string",
						"description": "Timestamp for when the feedback was created. If not provided, the time the call was made will be used as a timestamp.",
						"format": "date-time"
					},
					"id": {
						"title": "Feedback ID",
						"type": "string",
						"description": "String ID of user feedback. Starts with `ann_`, short for annotation."
					}
				}
			},
			"FeedbackType": {
				"title": "FeedbackType",
				"required": ["name", "data_type", "default"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"default": { "title": "Default", "type": "boolean" },
					"values": {
						"title": "Values",
						"type": "array",
						"items": { "type": "object" }
					}
				}
			},
			"FieldRequest": {
				"title": "FieldRequest",
				"required": ["name", "data_type"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"display_name": { "title": "Display Name", "type": "string" },
					"required": {
						"title": "Required",
						"type": "boolean",
						"default": true
					},
					"default": {
						"title": "Default",
						"anyOf": [{ "type": "string" }, { "type": "number" }]
					},
					"distinct_values": {
						"title": "Distinct Values",
						"type": "array",
						"items": { "type": "string" }
					},
					"meta": { "title": "Meta", "type": "object" }
				}
			},
			"FieldResponse": {
				"title": "FieldResponse",
				"required": [
					"id",
					"dataset_id",
					"name",
					"display_name",
					"data_type",
					"required"
				],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"dataset_id": { "title": "Dataset Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"display_name": { "title": "Display Name", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"required": { "title": "Required", "type": "boolean" },
					"meta": { "title": "Meta", "type": "object" },
					"count": { "title": "Count", "type": "integer" },
					"null_count": { "title": "Null Count", "type": "integer" },
					"value_counts": {
						"title": "Value Counts",
						"type": "object",
						"additionalProperties": { "type": "integer" }
					},
					"latest_counts_increase": {
						"title": "Latest Counts Increase",
						"type": "object",
						"additionalProperties": { "type": "integer" }
					},
					"distinct_values": {
						"title": "Distinct Values",
						"type": "array",
						"items": { "type": "string" }
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"FineTuneConfig": {
				"title": "FineTuneConfig",
				"required": ["base_model"],
				"type": "object",
				"properties": {
					"provider": {
						"title": "Model provider",
						"allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
						"description": "The company who is hosting the target model.This is used only if an existing experiment_id or model_config_id are not provided.",
						"default": "openai"
					},
					"base_model": {
						"title": "Base model",
						"type": "string",
						"description": "Unique reference to the model the fine-tuning was based on."
					},
					"parameters": {
						"title": "Fine-tuning parameters",
						"type": "object",
						"description": "Provider specific hyper-parameter settings that along with your base model will configure the fine-tuning process with the provider."
					},
					"validation_split": {
						"title": "Validation split",
						"type": "number",
						"description": "What proportion of training data should be used for validation.",
						"default": 0.1
					},
					"use_corrections": {
						"title": "Use corrections?",
						"type": "boolean",
						"description": "Whether or not to use corrections in place of outputs when preparing the data for fine-tuning",
						"default": true
					},
					"prompt_template": {
						"title": "Prompt template",
						"type": "string",
						"description": "A string template that uses double curly bracket interpolation syntax to determine how to combine your inputs to produce a promptwhen constructing your fine-tuning data-snapshot."
					},
					"generation_template": {
						"title": "Generation template",
						"type": "string",
						"description": "Analogous to a prompt template: a string template that uses double curly bracket interpolation syntax, but instead for determining how augment your model output to produce a generation when constructing your fine-tuning data-snapshot."
					}
				}
			},
			"FineTuneFormatting": {
				"title": "FineTuneFormatting",
				"type": "object",
				"properties": {
					"separator": {
						"title": "Separator",
						"type": "string",
						"default": " ->"
					},
					"completion_initial_whitespace": {
						"title": "Completion Initial Whitespace",
						"type": "string",
						"default": " "
					},
					"stop_sequence": {
						"title": "Stop Sequence",
						"type": "string",
						"default": "##"
					}
				}
			},
			"FineTunedModelResponse": {
				"title": "FineTunedModelResponse",
				"required": [
					"id",
					"name",
					"status",
					"data_snapshot",
					"config",
					"created_at",
					"updated_at"
				],
				"type": "object",
				"properties": {
					"id": {
						"title": "Fine-tuned model ID",
						"type": "string",
						"description": "Unique identifier for fine-tuned model."
					},
					"name": {
						"title": "Fine-tune run name",
						"type": "string",
						"description": "User defined friendly name for a fine-tuning run"
					},
					"status": {
						"title": "Status of fine tuning process",
						"type": "string",
						"description": "The fine-tuning process is run async and so the resultingfine-tuned model won't be available for generations until it has completed."
					},
					"model_name": {
						"title": "Fine-tuned model provider reference",
						"type": "string",
						"description": "Unique reference for the fine-tuned required to make calls to the provider."
					},
					"data_snapshot": {
						"title": "Data snapshot",
						"allOf": [{ "$ref": "#/components/schemas/DataSnapshotResponse" }],
						"description": "Details of the corresponding immutable dataset used for fine-tuning."
					},
					"metadata": {
						"title": "Metadata",
						"type": "object",
						"description": "Any additional metadata that you would like to log for reference."
					},
					"provider_id": {
						"title": "Fine-tuned model unique ID from the provider.",
						"type": "string",
						"description": "Unique ID for the fine-tuned model required to make calls to the provider's API."
					},
					"provider_details": {
						"title": "Provider results",
						"type": "object",
						"description": "Provider specific fine-tuning results."
					},
					"config": {
						"title": "Fine-tuning config.",
						"allOf": [{ "$ref": "#/components/schemas/FineTuneConfig" }],
						"description": "Configuration details for the fine-tuned model."
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"HTTPValidationError": {
				"title": "HTTPValidationError",
				"type": "object",
				"properties": {
					"detail": {
						"title": "Detail",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ValidationError" }
					}
				}
			},
			"InputRequest": {
				"title": "InputRequest",
				"required": ["name"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"data_sources": {
						"title": "Data Sources",
						"type": "array",
						"items": { "$ref": "#/components/schemas/DataSource" }
					},
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"description": { "title": "Description", "type": "string" },
					"display_only": {
						"title": "Display Only",
						"type": "boolean",
						"default": false
					},
					"meta": { "title": "Meta", "type": "object" }
				}
			},
			"JobTypes": {
				"title": "JobTypes",
				"enum": [
					"update_learner",
					"batch_scoring",
					"poll_provider_finetune",
					"run_metric_on_project"
				],
				"type": "string",
				"description": "What jobs do we support to submit to a worker"
			},
			"LabelResponse": {
				"title": "LabelResponse",
				"required": ["name", "id", "output_id"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"id": { "title": "Id", "type": "string" },
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"count": { "title": "Count", "type": "integer", "default": 0 },
					"object": { "title": "Object", "type": "string", "default": "label" },
					"output_id": { "title": "Output Id", "type": "integer" },
					"output": { "$ref": "#/components/schemas/OutputResponse" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				},
				"description": "Data returned in the payload when adding, editing or deleting a label(s)"
			},
			"LogDataSnapshot": {
				"title": "LogDataSnapshot",
				"required": ["id", "name", "count"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "string" },
					"name": { "title": "Name", "type": "string" },
					"count": { "title": "Count", "type": "integer" }
				}
			},
			"LogResponse": {
				"title": "LogResponse",
				"required": ["id", "inputs", "output", "created_at", "updated_at"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "string" },
					"source": { "title": "Source", "type": "string" },
					"model_config": {
						"$ref": "#/components/schemas/ProjectModelConfigResponse"
					},
					"inputs": { "title": "Inputs", "type": "object" },
					"output": { "title": "Output", "type": "string" },
					"metadata": { "title": "Metadata", "type": "object" },
					"feedback": {
						"title": "Feedback",
						"type": "array",
						"items": { "$ref": "#/components/schemas/FeedbackResponse" }
					},
					"metric_values": {
						"title": "Metric Values",
						"type": "array",
						"items": { "$ref": "#/components/schemas/MetricValueResponse" }
					},
					"data_snapshots": {
						"title": "Data Snapshots",
						"type": "array",
						"items": { "$ref": "#/components/schemas/LogDataSnapshot" }
					},
					"provider_response": {
						"title": "Provider Response",
						"type": "object"
					},
					"provider_latency": { "title": "Provider Latency", "type": "number" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"MetricValueResponse": {
				"title": "MetricValueResponse",
				"required": ["metric_id", "metric_name", "metric_value"],
				"type": "object",
				"properties": {
					"metric_id": { "title": "Metric Id", "type": "string" },
					"metric_name": { "title": "Metric Name", "type": "string" },
					"metric_value": { "title": "Metric Value", "type": "number" }
				}
			},
			"ModelConfigMetricsResponse": {
				"title": "ModelConfigMetricsResponse",
				"required": ["model_config_id", "metric_id", "average"],
				"type": "object",
				"properties": {
					"model_config_id": { "title": "Model Config Id", "type": "string" },
					"metric_id": { "title": "Metric Id", "type": "string" },
					"average": { "title": "Average", "type": "number" }
				}
			},
			"ModelEndpoints": {
				"title": "ModelEndpoints",
				"enum": ["complete", "edit"],
				"type": "string",
				"description": "Supported model provider endpoints."
			},
			"ModelProviders": {
				"title": "ModelProviders",
				"enum": ["openai", "ai21", "mock", "anthropic"],
				"type": "string",
				"description": "Supported model providers."
			},
			"OutputRequest": {
				"title": "OutputRequest",
				"required": ["name"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"data_sources": {
						"title": "Data Sources",
						"type": "array",
						"items": { "$ref": "#/components/schemas/DataSource" }
					},
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"instructions": { "title": "Instructions", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"task_type": {
						"allOf": [{ "$ref": "#/components/schemas/TaskTypes" }],
						"default": "classification"
					},
					"labels": {
						"title": "Labels",
						"type": "array",
						"items": { "$ref": "#/components/schemas/UpdateLabelRequest" }
					},
					"meta": { "title": "Meta", "type": "object" },
					"input": { "title": "Input", "type": "string" }
				}
			},
			"OutputResponse": {
				"title": "OutputResponse",
				"required": ["name", "task_type"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"task_type": { "$ref": "#/components/schemas/TaskTypes" },
					"data_key": { "title": "Data Key", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"meta": { "title": "Meta", "type": "object" },
					"project_id": { "title": "Project Id", "type": "integer" },
					"object": { "title": "Object", "type": "string", "default": "output" }
				},
				"description": "Output data to be nested inside the label response payload"
			},
			"PaginatedData_LogResponse_": {
				"title": "PaginatedData[LogResponse]",
				"required": ["records", "page", "size", "total"],
				"type": "object",
				"properties": {
					"records": {
						"title": "Records",
						"type": "array",
						"items": { "$ref": "#/components/schemas/LogResponse" }
					},
					"page": { "title": "Page", "type": "integer" },
					"size": { "title": "Size", "type": "integer" },
					"total": { "title": "Total", "type": "integer" }
				}
			},
			"Policy": {
				"title": "Policy",
				"type": "object",
				"properties": {
					"num_annotators": {
						"title": "How many different annotators to assign to each data-point",
						"type": "integer",
						"default": 1
					},
					"data_proportion": {
						"title": "How many data points you want multi-annotated",
						"type": "number",
						"default": 1.0
					},
					"object": {
						"title": "Object",
						"type": "string",
						"default": "policy"
					},
					"id": {
						"title": "Unique identifier for the policy.",
						"type": "string"
					}
				},
				"description": "A policy for how how many annotations to get on some proportion of the data.\n\nProviding multiple annotations for the same data-points provides consensus metrics\nand can help improve the quality of the final annotations provided to the model"
			},
			"PredictRequest": {
				"title": "PredictRequest",
				"required": ["data"],
				"type": "object",
				"properties": {
					"data": {
						"title": "An array of data containing the input fields defined by your project and any additional key-value metadata you wish to record for a prediction such as your document ids.",
						"type": "array",
						"items": {
							"type": "object",
							"additionalProperties": { "type": "string" }
						},
						"example": [
							{ "text": "Your document data...", "external_id": "123" }
						]
					},
					"n_best": {
						"title": "Controls the number of most confident predictions from the model to return for each data point.",
						"type": "integer",
						"default": 1
					},
					"save": {
						"title": "Whether or not the Humanloop platform will log the request and response data from a prediction",
						"type": "boolean",
						"default": true
					}
				}
			},
			"PredictResponse": {
				"title": "PredictResponse",
				"required": ["data", "results"],
				"type": "object",
				"properties": {
					"id": {
						"title": "Unique identifier for each prediction.",
						"type": "integer"
					},
					"data": {
						"title": "Data containing the input fields defined by your project and any additional metadata you wish to record for a prediction such as your ids",
						"type": "object",
						"additionalProperties": {
							"anyOf": [
								{ "type": "integer" },
								{ "type": "string" },
								{ "type": "number" }
							]
						},
						"example": { "text": "Your document data...", "external_id": "123" }
					},
					"results": {
						"title": "The predicted results from your model.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ResultResponse" }
					},
					"usage": {
						"title": "If getting batch predictions across all the existing data associated toa project, usage indicates whether the data point was used for model training or testing purposes.",
						"allOf": [{ "$ref": "#/components/schemas/ProjectDataUsage" }]
					}
				}
			},
			"PredictWithFallbackRequest": {
				"title": "PredictWithFallbackRequest",
				"required": ["data"],
				"type": "object",
				"properties": {
					"data": {
						"title": "An array of datapoints containing the input fields defined by your project and any additional key-value metadata you wish to record for a prediction such as your document ids. A new datapoint will automatically be created for this data.",
						"type": "array",
						"items": {
							"type": "object",
							"additionalProperties": {
								"anyOf": [
									{ "type": "integer" },
									{ "type": "string" },
									{ "type": "number" }
								]
							}
						},
						"example": [
							{ "text": "Your document data...", "external_id": "123" }
						]
					},
					"data_ids": {
						"title": "Humanloop ids of existing datapoints that you wish to generate a new prediction with. This should be specified instead of the data field where appropriate",
						"type": "array",
						"items": { "type": "integer" }
					},
					"n_best": {
						"title": "Controls the number of most confident predictions from the model to return for each data point.",
						"type": "integer",
						"default": 1
					},
					"batch_id": {
						"title": "A user provided id for grouping batches of predictions.",
						"type": "string"
					},
					"confidence_threshold": {
						"title": "A value between 0 and 1. If the model confidence (for the highest confident value returned) is below this threshold, a task will be routed to a user to complete",
						"type": "number",
						"default": 0
					}
				}
			},
			"PredictWithFallbackResponse": {
				"title": "PredictWithFallbackResponse",
				"required": ["data", "data_id"],
				"type": "object",
				"properties": {
					"prediction_id": {
						"title": "Unique identifier for each prediction. Generated if a model exists.",
						"type": "integer"
					},
					"batch_id": {
						"title": "A user provided id for grouping batches of predictions.",
						"type": "string"
					},
					"data": {
						"title": "Data containing the input fields defined by your project and any additional metadata you wish to record for a prediction such as your ids",
						"type": "object",
						"additionalProperties": {
							"anyOf": [
								{ "type": "integer" },
								{ "type": "string" },
								{ "type": "number" }
							]
						},
						"example": { "text": "Your document data...", "external_id": "123" }
					},
					"data_id": {
						"title": "Unique identifier of the associated datapoint.",
						"type": "integer"
					},
					"results": {
						"title": "The predicted results from your model. Generated if a model exists",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ResultResponse" }
					},
					"confidence_threshold": {
						"title": "A value between 0 and 1. If the model confidence is below this threshold, a task will be routed to a user to complete",
						"type": "number",
						"default": 0
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"task_id": {
						"title": "Unique identifier of a task if created.",
						"type": "integer"
					},
					"user": {
						"title": "The email address of the user the task is assigned to for completion.",
						"type": "string"
					},
					"task_url": {
						"title": "A URL to the annotation interface to complete the task",
						"type": "string"
					}
				}
			},
			"ProjectDataStatus": {
				"title": "ProjectDataStatus",
				"enum": ["complete", "needs_review", "pending", "in_progress"],
				"type": "string",
				"description": "Status of a project's datapoint"
			},
			"ProjectDataUsage": {
				"title": "ProjectDataUsage",
				"enum": ["testing", "validation", "training"],
				"type": "string",
				"description": "How a data point has been used when updating an AI model for this project"
			},
			"ProjectDatasetFieldResponse": {
				"title": "ProjectDatasetFieldResponse",
				"required": ["id", "name", "data_type"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"display_name": { "title": "Display Name", "type": "string" }
				}
			},
			"ProjectDatasetResponse": {
				"title": "ProjectDatasetResponse",
				"required": ["id", "name", "count"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"count": { "title": "Count", "type": "integer" },
					"description": { "title": "Description", "type": "string" },
					"fields": {
						"title": "Fields",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectDatasetFieldResponse"
						}
					}
				}
			},
			"ProjectInputDataSourceResponse": {
				"title": "ProjectInputDataSourceResponse",
				"required": ["id", "name"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" }
				}
			},
			"ProjectInputResponse": {
				"title": "ProjectInputResponse",
				"required": [
					"data_type",
					"data_sources",
					"display_only",
					"id",
					"name",
					"project_id",
					"updated_at",
					"created_at"
				],
				"type": "object",
				"properties": {
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"description": { "title": "Description", "type": "string" },
					"data_sources": {
						"title": "Data Sources",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectInputDataSourceResponse"
						}
					},
					"display_only": { "title": "Display Only", "type": "boolean" },
					"id": { "title": "Id", "type": "integer" },
					"meta": { "title": "Meta", "type": "object" },
					"name": { "title": "Name", "type": "string" },
					"project_id": { "title": "Project Id", "type": "integer" },
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"ProjectLearnerEvaluationResponse": {
				"title": "ProjectLearnerEvaluationResponse",
				"required": ["id", "eval_metrics"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"eval_metrics": { "title": "Eval Metrics", "type": "object" }
				}
			},
			"ProjectLearnerResponse": {
				"title": "ProjectLearnerResponse",
				"required": ["id", "current_status"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"current_status": { "$ref": "#/components/schemas/Status" },
					"evaluations": {
						"title": "Evaluations",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectLearnerEvaluationResponse"
						}
					},
					"latest_evaluation": {
						"$ref": "#/components/schemas/ProjectLearnerEvaluationResponse"
					}
				}
			},
			"ProjectModelConfigFeedbackStatsResponse": {
				"title": "ProjectModelConfigFeedbackStatsResponse",
				"required": [
					"feedback_group_id",
					"feedback_group_name",
					"feedback_label",
					"feedback_count"
				],
				"type": "object",
				"properties": {
					"feedback_group_id": {
						"title": "Feedback Group Id",
						"type": "integer"
					},
					"feedback_group_name": {
						"title": "Feedback Group Name",
						"type": "string"
					},
					"feedback_label": { "title": "Feedback Label", "type": "string" },
					"feedback_count": { "title": "Feedback Count", "type": "integer" }
				}
			},
			"ProjectOutputResponse": {
				"title": "ProjectOutputResponse",
				"required": [
					"created_at",
					"data_sources",
					"display_name",
					"id",
					"name",
					"project_id",
					"task_type"
				],
				"type": "object",
				"properties": {
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"data_type": { "$ref": "#/components/schemas/DataTypes" },
					"description": { "title": "Description", "type": "string" },
					"data_sources": {
						"title": "Data Sources",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectInputDataSourceResponse"
						}
					},
					"display_name": { "title": "Display Name", "type": "string" },
					"id": { "title": "Id", "type": "integer" },
					"input": { "title": "Input", "type": "string" },
					"instructions": { "title": "Instructions", "type": "string" },
					"labels": {
						"title": "Labels",
						"type": "array",
						"items": { "$ref": "#/components/schemas/LabelResponse" }
					},
					"meta": { "title": "Meta", "type": "object" },
					"name": { "title": "Name", "type": "string" },
					"project_id": { "title": "Project Id", "type": "integer" },
					"task_type": { "$ref": "#/components/schemas/TaskTypes" }
				}
			},
			"ProjectRequest": {
				"title": "ProjectRequest",
				"required": ["name", "outputs", "inputs", "users"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"outputs": {
						"title": "Outputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/OutputRequest" }
					},
					"inputs": {
						"title": "Inputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/InputRequest" }
					},
					"instructions": { "title": "Instructions", "type": "string" },
					"guidelines": { "title": "Guidelines", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"users": {
						"title": "Users",
						"type": "array",
						"items": { "type": "string" }
					},
					"policy": { "$ref": "#/components/schemas/Policy" },
					"learner_config": { "title": "Learner Config", "type": "object" },
					"task_allocation_strategy": {
						"$ref": "#/components/schemas/TaskAllocationStrategy"
					},
					"task_allocation_batch_size": {
						"title": "Task Allocation Batch Size",
						"type": "integer"
					},
					"review_existing_annotations": {
						"title": "If your dataset fields contain existing annotations then these can be used to warm start your project by specifying their field id as output data sources. You can have your annotator users first review these annotations before they are used to train your model by setting this 'review_existing_annotations' bool to True.",
						"type": "boolean",
						"default": false
					}
				}
			},
			"ProjectResponse": {
				"title": "ProjectResponse",
				"required": [
					"id",
					"name",
					"active",
					"auth_key",
					"pred_count",
					"created_at",
					"inputs",
					"outputs",
					"users",
					"data_count",
					"data_without_tasks_count",
					"tasks_count",
					"latest_completed_tasks_batch_size",
					"completed_tasks_count",
					"incomplete_tasks_count",
					"flagged_count",
					"task_allocation_strategy",
					"task_allocation_batch_size"
				],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"shared_id": { "title": "Shared Id", "type": "string" },
					"external_id": { "title": "External Id", "type": "string" },
					"active": { "title": "Active", "type": "boolean" },
					"auth_key": { "title": "Auth Key", "type": "string" },
					"pred_count": { "title": "Pred Count", "type": "integer" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"default_dataset_id": {
						"title": "Default Dataset Id",
						"type": "integer"
					},
					"description": { "title": "Description", "type": "string" },
					"guidelines": { "title": "Guidelines", "type": "string" },
					"policy": { "title": "Policy", "type": "object" },
					"instructions": { "title": "Instructions", "type": "string" },
					"status": { "$ref": "#/components/schemas/ProjectStatus" },
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"inputs": {
						"title": "Inputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ProjectInputResponse" }
					},
					"outputs": {
						"title": "Outputs",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ProjectOutputResponse" }
					},
					"users": {
						"title": "Users",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ProjectUserResponse" }
					},
					"learner": { "$ref": "#/components/schemas/ProjectLearnerResponse" },
					"datasets": {
						"title": "Datasets",
						"type": "array",
						"items": { "$ref": "#/components/schemas/ProjectDatasetResponse" }
					},
					"data_count": { "title": "Data Count", "type": "integer" },
					"data_without_tasks_count": {
						"title": "Data Without Tasks Count",
						"type": "integer"
					},
					"tasks_count": { "title": "Tasks Count", "type": "integer" },
					"latest_completed_tasks_batch_size": {
						"title": "Latest Completed Tasks Batch Size",
						"type": "integer"
					},
					"completed_tasks_count": {
						"title": "Completed Tasks Count",
						"type": "integer"
					},
					"incomplete_tasks_count": {
						"title": "Incomplete Tasks Count",
						"type": "integer"
					},
					"flagged_count": { "title": "Flagged Count", "type": "integer" },
					"task_allocation_strategy": {
						"$ref": "#/components/schemas/TaskAllocationStrategy"
					},
					"task_allocation_batch_size": {
						"title": "Task Allocation Batch Size",
						"type": "integer"
					},
					"dashboard_configuration": {
						"title": "Dashboard Configuration",
						"type": "object"
					}
				}
			},
			"ProjectSortBy": {
				"title": "ProjectSortBy",
				"enum": ["created_at", "updated_at", "name"],
				"type": "string",
				"description": "An enumeration."
			},
			"ProjectStatus": {
				"title": "ProjectStatus",
				"enum": ["Maintenance", "Exploration", "Annotation"],
				"type": "string",
				"description": "Current status of learner"
			},
			"ProjectUpdateRequest": {
				"title": "ProjectUpdateRequest",
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"instructions": { "title": "Instructions", "type": "string" },
					"guidelines": { "title": "Guidelines", "type": "string" },
					"description": { "title": "Description", "type": "string" },
					"learner_config": { "title": "Learner Config", "type": "object" },
					"policy": { "$ref": "#/components/schemas/Policy" },
					"task_allocation_strategy": {
						"$ref": "#/components/schemas/TaskAllocationStrategy"
					},
					"task_allocation_batch_size": {
						"title": "Task Allocation Batch Size",
						"type": "integer"
					}
				}
			},
			"ProjectUserResponse": {
				"title": "ProjectUserResponse",
				"required": [
					"active",
					"email_address",
					"id",
					"role",
					"tier_id",
					"tier",
					"created_at",
					"username",
					"verified"
				],
				"type": "object",
				"properties": {
					"active": { "title": "Active", "type": "boolean" },
					"email_address": { "title": "Email Address", "type": "string" },
					"full_name": { "title": "Full Name", "type": "string" },
					"id": { "title": "Id", "type": "integer" },
					"intent": { "title": "Intent" },
					"role": { "$ref": "#/components/schemas/RoleEnum" },
					"tier_id": { "title": "Tier Id", "type": "integer" },
					"tier": { "$ref": "#/components/schemas/ProjectUserTierResponse" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"username": { "title": "Username", "type": "string" },
					"verified": { "title": "Verified", "type": "boolean" },
					"complete_tasks": { "title": "Complete Tasks", "type": "integer" },
					"incomplete_tasks": {
						"title": "Incomplete Tasks",
						"type": "integer"
					},
					"complete_and_not_flagged_tasks": {
						"title": "Complete And Not Flagged Tasks",
						"type": "integer"
					},
					"incomplete_and_not_flagged_tasks": {
						"title": "Incomplete And Not Flagged Tasks",
						"type": "integer"
					}
				}
			},
			"ProjectUserTierLimitsResponse": {
				"title": "ProjectUserTierLimitsResponse",
				"required": ["projects", "annotators", "dataset_size", "predictions"],
				"type": "object",
				"properties": {
					"projects": { "title": "Projects", "type": "integer" },
					"annotators": { "title": "Annotators", "type": "integer" },
					"dataset_size": { "title": "Dataset Size", "type": "integer" },
					"predictions": { "title": "Predictions", "type": "integer" }
				}
			},
			"ProjectUserTierResponse": {
				"title": "ProjectUserTierResponse",
				"required": ["updated_at", "created_at", "id", "name", "limits"],
				"type": "object",
				"properties": {
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"id": { "title": "Id", "type": "integer" },
					"name": { "title": "Name", "type": "string" },
					"limits": {
						"$ref": "#/components/schemas/ProjectUserTierLimitsResponse"
					}
				}
			},
			"ProviderApiKeys": {
				"title": "ProviderApiKeys",
				"type": "object",
				"properties": {
					"openai": { "title": "Openai", "type": "string" },
					"ai21": { "title": "Ai21", "type": "string" },
					"mock": { "title": "Mock", "type": "string" },
					"anthropic": { "title": "Anthropic", "type": "string" }
				}
			},
			"ReassignTasksRequest": {
				"title": "ReassignTasksRequest",
				"required": ["source_user", "target_user", "tasks"],
				"type": "object",
				"properties": {
					"source_user": {
						"title": "The email address of the user to take tasks from.",
						"type": "string"
					},
					"target_user": {
						"title": "The email address of the user to give tasks to.",
						"type": "string"
					},
					"tasks": {
						"title": "The number of tasks to attempt to reassign",
						"type": "integer"
					}
				}
			},
			"ReassignTasksResponse": {
				"title": "ReassignTasksResponse",
				"required": ["reassigned_tasks"],
				"type": "object",
				"properties": {
					"reassigned_tasks": { "title": "Reassigned Tasks", "type": "integer" }
				}
			},
			"ResponseList_DatasetResponse_": {
				"title": "ResponseList[DatasetResponse]",
				"type": "array",
				"items": { "$ref": "#/components/schemas/DatasetResponse" },
				"description": "Pydantic convenience type for a list of objects"
			},
			"ResultResponse": {
				"title": "ResultResponse",
				"required": ["id", "label", "result_type"],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of this result", "type": "string" },
					"confidence": {
						"title": "A confidence score for the result",
						"type": "number"
					},
					"start": {
						"title": "Start character index of the span in the parent document.",
						"type": "integer"
					},
					"end": {
						"title": "End character index of the span in the parent document.",
						"type": "integer"
					},
					"text": {
						"title": "Text the result covers if applicable",
						"type": "string"
					},
					"label": {
						"title": "The chosen label for the output value.",
						"allOf": [{ "$ref": "#/components/schemas/LabelResponse" }]
					},
					"result_type": {
						"title": "The type of the result (e.g. span or classification)",
						"allOf": [{ "$ref": "#/components/schemas/ResultType" }]
					}
				},
				"description": "An instance of a result"
			},
			"ResultType": {
				"title": "ResultType",
				"enum": ["span", "classification", "generation"],
				"type": "string",
				"description": "Enum of different kinds of result"
			},
			"RoleEnum": {
				"title": "RoleEnum",
				"enum": ["owner", "annotator", "admin"],
				"type": "string",
				"description": "An enumeration."
			},
			"SortOrder": {
				"title": "SortOrder",
				"enum": ["asc", "desc"],
				"type": "string",
				"description": "An enumeration."
			},
			"Span": {
				"title": "Span",
				"required": ["start", "end", "label"],
				"type": "object",
				"properties": {
					"start": {
						"title": "Start character index of the span in the parent document.",
						"type": "integer"
					},
					"end": {
						"title": "End character index of the span in the parent document.",
						"type": "integer"
					},
					"label": {
						"title": "The name of the chosen label for the output value.",
						"type": "string"
					},
					"text": {
						"title": "The extracted text corresponded to the span start and end indexes.",
						"type": "string",
						"example": "The extracted span text ..."
					},
					"confidence": {
						"title": "A confidence score for the output value.",
						"type": "number"
					},
					"id": {
						"title": "Unique identifier for the span value.",
						"type": "string"
					},
					"parent_id": {
						"title": "Unique identifier for the parent document.",
						"anyOf": [{ "type": "integer" }, { "type": "string" }]
					},
					"object": { "title": "Object", "type": "string", "default": "span" }
				},
				"description": "An instance of a labelled span for an output"
			},
			"Status": {
				"title": "Status",
				"enum": ["Untrained", "Waiting", "Training", "Scoring"],
				"type": "string",
				"description": "Current status of learner"
			},
			"SubRequest": {
				"title": "SubRequest",
				"type": "object",
				"properties": {
					"event": {
						"title": "An event one can subscribe to for a project.",
						"allOf": [{ "$ref": "#/components/schemas/Event" }],
						"default": "task.completed"
					},
					"callback_url": {
						"title": "The callback URL for Humanloop to post notifications to for this subscription.",
						"type": "string"
					},
					"callback_headers": {
						"title": "A dictionary of valid HTTP headers that Humanloop should include in posts to the callback_url.",
						"type": "object"
					},
					"email_address": {
						"title": "The email_address for humanloop to send notifications to or this subscription.",
						"type": "string"
					},
					"active": {
						"title": "Whether or not the subscription is active, meaning notifications will be sent for the specified events.",
						"type": "boolean",
						"default": true
					}
				}
			},
			"TaskAllocationStrategy": {
				"title": "TaskAllocationStrategy",
				"enum": ["automatic", "manual"],
				"type": "string",
				"description": "Strategy for automatic task allocation\n\nControls whether new tasks are automatically allocated when a user\ncompletes their tasks."
			},
			"TaskAnnotationResponse": {
				"title": "TaskAnnotationResponse",
				"required": ["id", "result_type", "label_id", "label_name"],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of this annotation", "type": "string" },
					"result_type": {
						"title": "The type of the result (e.g. span or classification)",
						"allOf": [{ "$ref": "#/components/schemas/ResultType" }]
					},
					"start": {
						"title": "Start character index of the span in the parent document.",
						"type": "integer"
					},
					"end": {
						"title": "End character index of the span in the parent document.",
						"type": "integer"
					},
					"text": {
						"title": "Text the predicted span covers if applicable",
						"type": "string"
					},
					"label_id": {
						"title": "ID of the label of the predicted result",
						"type": "string"
					},
					"label_name": {
						"title": "Name of the label of the predicted result",
						"type": "string"
					},
					"label_display_name": {
						"title": "Label Display Name",
						"type": "string"
					},
					"label_description": {
						"title": "Label Description",
						"type": "string"
					}
				},
				"description": "This response model comes from the annotations retrieved by get_tasks_dataframe().\n\nKept separate from AnnotationResponse to avoid nested attributes\n(like full Label, annotation's task information etc.)."
			},
			"TaskPredictionResponse": {
				"title": "TaskPredictionResponse",
				"required": [
					"id",
					"result_id",
					"result_type",
					"label_id",
					"label_name",
					"created_at",
					"updated_at"
				],
				"type": "object",
				"properties": {
					"id": { "title": "The ID of this prediction", "type": "string" },
					"result_id": {
						"title": "The ID of the predicted result",
						"type": "string"
					},
					"result_type": {
						"title": "The type of the result (e.g. span or classification)",
						"allOf": [{ "$ref": "#/components/schemas/ResultType" }]
					},
					"start": {
						"title": "Start character index of the span in the parent document.",
						"type": "integer"
					},
					"end": {
						"title": "End character index of the span in the parent document.",
						"type": "integer"
					},
					"text": {
						"title": "Text the predicted span covers if applicable",
						"type": "string"
					},
					"confidence": {
						"title": "A confidence score for the prediction",
						"type": "number"
					},
					"label_id": {
						"title": "ID of the label of the predicted result",
						"type": "string"
					},
					"label_name": {
						"title": "Name of the label of the predicted result",
						"type": "string"
					},
					"label_display_name": {
						"title": "Label Display Name",
						"type": "string"
					},
					"label_description": {
						"title": "Label Description",
						"type": "string"
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				},
				"description": "Backend currently only returns active learning predictions (not user-generated predictions).\nThis response model comes from the predictions retrieved by get_tasks_dataframe(),\nand is actually on a Result-level\n(i.e. one object = one prediction result. A single prediction with multiple results will yield multiple objects.)"
			},
			"TaskResponse": {
				"title": "TaskResponse",
				"required": [
					"id",
					"user_id",
					"email_address",
					"project_id",
					"project_data_id",
					"data_id",
					"inputs",
					"annotations",
					"predictions"
				],
				"type": "object",
				"properties": {
					"id": {
						"title": "Unique identifier for each task.",
						"type": "integer"
					},
					"user_id": {
						"title": "ID of the user assigned to the task to provide annotations.",
						"type": "integer"
					},
					"full_name": {
						"title": "The name of the user assigned to the task to provide annotations.",
						"type": "string"
					},
					"email_address": {
						"title": "The email address of the user assigned to the task to provide annotations.",
						"type": "string"
					},
					"project_id": {
						"title": "Unique identifier for the associated project.",
						"type": "integer"
					},
					"project_data_id": {
						"title": "Unique identifier for the associated project datapoint.",
						"type": "integer"
					},
					"data_id": {
						"title": "Unique identifier for the associated datapoint.",
						"type": "integer"
					},
					"inputs": {
						"title": "The data associated to your task mapped to your projects input schema.",
						"type": "object",
						"example": { "text": "Your document data...", "external_id": "123" }
					},
					"complete": {
						"title": "Whether or not the task has been completed meaning the annotations have been used to improve your AI model",
						"type": "boolean"
					},
					"flagged": {
						"title": "Whether the task has been flagged by a user - usually indicating it needs to be revisited at a later time.",
						"type": "boolean"
					},
					"score": {
						"title": "An active learning score indicating how useful annotations for the associated data will be for improving the model performance",
						"type": "number"
					},
					"usage": {
						"title": "How a task's annotations and data have been used when updating the AI model (e.g. for training or testing purposes)",
						"allOf": [{ "$ref": "#/components/schemas/ProjectDataUsage" }]
					},
					"url": {
						"title": "A URL to navigate to the task on the Humanloop platform to provide annotations",
						"type": "string"
					},
					"comment": {
						"title": "A comment on the data-point, generally used to explain why data has beenflagged.",
						"type": "string"
					},
					"annotations": {
						"title": "The user provided outputs to your model for the associated input data.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskAnnotationResponse" }
					},
					"predictions": {
						"title": "The user provided outputs to your model for the associated input data.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskPredictionResponse" }
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"TaskSortby": {
				"title": "TaskSortby",
				"enum": ["confidence", "confusion", "last_updated"],
				"type": "string",
				"description": "Different sorting modes for task data"
			},
			"TaskTypes": {
				"title": "TaskTypes",
				"enum": [
					"classification",
					"multi_label_classification",
					"sequence_tagging",
					"ordinal_regression",
					"generation"
				],
				"type": "string",
				"description": "What ML tasks we support for our outputs"
			},
			"TierResponse": {
				"title": "TierResponse",
				"required": ["name", "limits"],
				"type": "object",
				"properties": {
					"name": { "title": "Name", "type": "string" },
					"limits": {
						"title": "Limits",
						"type": "object",
						"additionalProperties": { "type": "integer" }
					}
				}
			},
			"TrainerConfigRequest": {
				"title": "TrainerConfigRequest",
				"type": "object",
				"properties": {
					"max_epochs": { "title": "Max Epochs", "type": "integer" },
					"learning_rate": { "title": "Learning Rate", "type": "number" },
					"reinitialise": {
						"title": "Reinitialise",
						"type": "boolean",
						"default": false
					}
				}
			},
			"UpdateAnnotationRequest": {
				"title": "UpdateAnnotationRequest",
				"type": "object",
				"properties": {
					"reviewed": {
						"title": "Whether this annotation has been reviewed",
						"type": "boolean"
					},
					"start": {
						"title": "Start offset of the annotation (span only)",
						"type": "integer"
					},
					"end": {
						"title": "End offset of the annotation (span only)",
						"type": "integer"
					},
					"label_id": {
						"title": "ID of the annotation's label",
						"type": "string"
					},
					"strength": {
						"title": "strength of the association with the annotation's label",
						"type": "number"
					},
					"text": {
						"title": "The text the annotation covers",
						"type": "string"
					}
				}
			},
			"UpdateDataResponse": {
				"title": "UpdateDataResponse",
				"required": [
					"id",
					"attempted",
					"succeeded",
					"processing",
					"msg",
					"fields"
				],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"attempted": { "title": "Attempted", "type": "integer" },
					"succeeded": { "title": "Succeeded", "type": "integer" },
					"processing": { "title": "Processing", "type": "integer" },
					"msg": { "title": "Msg", "type": "string" },
					"fields": {
						"title": "Fields",
						"type": "array",
						"items": { "$ref": "#/components/schemas/FieldResponse" }
					}
				}
			},
			"UpdateDataSetRequest": {
				"title": "UpdateDataSetRequest",
				"required": ["data"],
				"type": "object",
				"properties": {
					"data": {
						"title": "Data",
						"type": "array",
						"items": { "$ref": "#/components/schemas/DataRequest" }
					}
				}
			},
			"UpdateFineTunedModelRequest": {
				"title": "UpdateFineTunedModelRequest",
				"type": "object",
				"properties": { "name": { "title": "Name", "type": "string" } }
			},
			"UpdateFineTunedModelsModel": {
				"title": "UpdateFineTunedModelsModel",
				"required": ["id"],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "string" },
					"error": { "title": "Error", "type": "string" }
				}
			},
			"UpdateFineTunedModelsRequest": {
				"title": "UpdateFineTunedModelsRequest",
				"required": ["provider_api_keys"],
				"type": "object",
				"properties": {
					"provider_api_keys": {
						"title": "Provider API Keys",
						"type": "object",
						"additionalProperties": { "type": "string" },
						"description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop."
					}
				}
			},
			"UpdateFineTunedModelsResponse": {
				"title": "UpdateFineTunedModelsResponse",
				"required": ["updated", "failed"],
				"type": "object",
				"properties": {
					"updated": {
						"title": "Updated",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/UpdateFineTunedModelsModel"
						}
					},
					"failed": {
						"title": "Failed",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/UpdateFineTunedModelsModel"
						}
					}
				}
			},
			"UpdateLabelRequest": {
				"title": "UpdateLabelRequest",
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "string" },
					"name": { "title": "Name", "type": "string" },
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				},
				"description": "The definition of a Label used as part of an output\nspecification for a project and/or learner. The name will be a unique key\n(within the scope of a single output) that will be referenced by annotations\nand predictions"
			},
			"UpdateProjectModelConfigRequest": {
				"title": "UpdateProjectModelConfigRequest",
				"type": "object",
				"properties": {
					"display_name": { "title": "Display Name", "type": "string" },
					"description": { "title": "Description", "type": "string" }
				}
			},
			"UpdateTaskRequest": {
				"title": "UpdateTaskRequest",
				"type": "object",
				"properties": {
					"annotations": {
						"title": "The user-provided annotations",
						"anyOf": [
							{ "$ref": "#/components/schemas/Classification" },
							{
								"type": "array",
								"items": { "$ref": "#/components/schemas/Span" }
							},
							{
								"type": "array",
								"items": { "$ref": "#/components/schemas/Classification" }
							}
						]
					},
					"email_address": {
						"title": "The email address of the user to be assigned to the task to provide annotations.",
						"type": "string"
					},
					"flagged": {
						"title": "Whether the task has been flagged by a user - usually indicating it needs to be revisited at a later time.",
						"type": "boolean"
					},
					"complete": {
						"title": "Whether or not the task has been completed meaning the annotations will be used to improve your AI model",
						"type": "boolean"
					},
					"comment": {
						"title": "A comment on the associated data-point,generally used to explain why data has been flagged.",
						"type": "string"
					},
					"usage": {
						"title": "Specify if the associated datapoint and annotations for this task should be used for model training, validation or testing. If this is notspecified Humanloop will determine the usage automatically.",
						"allOf": [{ "$ref": "#/components/schemas/ProjectDataUsage" }]
					}
				}
			},
			"UpdateUserRequest": {
				"title": "UpdateUserRequest",
				"type": "object",
				"properties": {
					"username": { "title": "Username", "type": "string" },
					"email_address": { "title": "Email Address", "type": "string" },
					"password": { "title": "Password", "type": "string" },
					"full_name": { "title": "Full Name", "type": "string" },
					"intent": {
						"title": "Intent",
						"type": "array",
						"items": { "type": "string" }
					}
				}
			},
			"UpsertAnnotationRequest": {
				"title": "UpsertAnnotationRequest",
				"required": ["task_id"],
				"type": "object",
				"properties": {
					"task_id": {
						"title": "ID of the annotation's task",
						"type": "integer"
					},
					"label_id": {
						"title": "ID of the annotation's label",
						"type": "string"
					},
					"start": {
						"title": "Start offset of the annotation (span only)",
						"type": "integer"
					},
					"end": {
						"title": "End offset of the annotation (span only)",
						"type": "integer"
					},
					"text": {
						"title": "The text the annotation covers (span only)",
						"type": "string"
					},
					"strength": {
						"title": "strength of the association with the annotation's label (ordinal regression only)",
						"type": "number"
					}
				}
			},
			"UserInviteRequest": {
				"title": "UserInviteRequest",
				"required": ["email_address", "project_id"],
				"type": "object",
				"properties": {
					"email_address": { "title": "Email Address", "type": "string" },
					"project_id": { "title": "Project Id", "type": "integer" },
					"role": {
						"allOf": [{ "$ref": "#/components/schemas/RoleEnum" }],
						"default": "annotator"
					},
					"full_name": { "title": "Full Name", "type": "string" }
				}
			},
			"UserRequest": {
				"title": "UserRequest",
				"required": ["username", "email_address", "password"],
				"type": "object",
				"properties": {
					"username": { "title": "Username", "type": "string" },
					"email_address": { "title": "Email Address", "type": "string" },
					"password": { "title": "Password", "type": "string" },
					"role": {
						"allOf": [{ "$ref": "#/components/schemas/RoleEnum" }],
						"default": "owner"
					},
					"full_name": { "title": "Full Name", "type": "string" },
					"intent": {
						"title": "Intent",
						"type": "array",
						"items": { "type": "string" }
					}
				}
			},
			"UserResponse": {
				"title": "UserResponse",
				"required": [
					"id",
					"username",
					"email_address",
					"role",
					"active",
					"verified",
					"tier_id",
					"tier",
					"created_at",
					"updated_at"
				],
				"type": "object",
				"properties": {
					"id": { "title": "Id", "type": "integer" },
					"username": { "title": "Username", "type": "string" },
					"email_address": { "title": "Email Address", "type": "string" },
					"role": { "$ref": "#/components/schemas/RoleEnum" },
					"full_name": { "title": "Full Name", "type": "string" },
					"auth_key": { "title": "Auth Key", "type": "string" },
					"active": { "title": "Active", "type": "boolean" },
					"verified": { "title": "Verified", "type": "boolean" },
					"tier_id": { "title": "Tier Id", "type": "integer" },
					"tier": { "$ref": "#/components/schemas/TierResponse" },
					"intent": { "title": "Intent" },
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"feature_flags": {
						"title": "Feature Flags",
						"type": "object",
						"additionalProperties": { "type": "boolean" }
					}
				}
			},
			"ValidationError": {
				"title": "ValidationError",
				"required": ["loc", "msg", "type"],
				"type": "object",
				"properties": {
					"loc": {
						"title": "Location",
						"type": "array",
						"items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
					},
					"msg": { "title": "Message", "type": "string" },
					"type": { "title": "Error Type", "type": "string" }
				}
			},
			"ProjectModelConfigResponse": {
				"title": "ProjectModelConfigResponse",
				"required": [
					"id",
					"display_name",
					"model_name",
					"created_at",
					"updated_at",
					"last_used"
				],
				"type": "object",
				"properties": {
					"id": {
						"title": "Model config ID",
						"type": "string",
						"description": "String ID of model config. Starts with `config_`."
					},
					"project_id": {
						"title": "Project ID",
						"type": "string",
						"description": "String ID of project the model config belongs to. Starts with `pr_`."
					},
					"display_name": {
						"title": "Display name",
						"type": "string",
						"description": "Display name of model config. If this is not set by the user, a friendly name will be generated."
					},
					"model_name": {
						"title": "Name of language model",
						"type": "string",
						"description": "Model used for generation. E.g. text-davinci-002."
					},
					"prompt_template": {
						"title": "Prompt template",
						"type": "string",
						"description": "Prompt template that incorporated your specified inputs to form your final request to the model."
					},
					"parameters": {
						"title": "Model parameters",
						"type": "object",
						"description": "Provider specific hyper-parameter settings that along with your model and prompt template (if provided) will uniquely determine a model configuration on Humanloop. For example, the temperature setting."
					},
					"provider": {
						"title": "Model provider",
						"allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
						"description": "The organization hosting the target model."
					},
					"endpoint": {
						"title": "Provider endpoint",
						"allOf": [{ "$ref": "#/components/schemas/ModelEndpoints" }],
						"description": "Which of the providers' endpoints to use. E.g. Complete, Edit."
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"last_used": {
						"title": "Last Used",
						"type": "string",
						"format": "date-time"
					},
					"experiment_id": {
						"title": "Experiment ID",
						"type": "string",
						"description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment."
					}
				}
			},
			"ProjectModelConfigResponse": {
				"title": "ProjectModelConfigResponse",
				"required": [
					"model",
					"prompt_template",
					"id",
					"created_at",
					"updated_at",
					"last_used"
				],
				"type": "object",
				"properties": {
					"provider": {
						"title": "Model provider",
						"allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
						"description": "The company providing the underlying model service.",
						"default": "openai"
					},
					"endpoint": {
						"title": "Provider endpoint",
						"allOf": [{ "$ref": "#/components/schemas/ModelEndpoints" }],
						"description": "Which of the providers model endpoints to use. For example Complete or Edit.",
						"default": "complete"
					},
					"model": {
						"title": "Model instance used",
						"type": "string",
						"description": "What model instance to use for the generation. e.g. text-davinci-002."
					},
					"prompt_template": {
						"title": "Prompt template",
						"type": "string",
						"description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
					},
					"temperature": {
						"title": "Sampling temperature",
						"type": "number",
						"description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
						"default": 1
					},
					"max_tokens": {
						"title": "Maximum tokens",
						"type": "integer",
						"description": "The maximum number of tokens to generate in the completion.",
						"default": 16
					},
					"top_p": {
						"title": "Top p probability mass",
						"type": "number",
						"description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
						"default": 1
					},
					"stop": {
						"title": "Stop sequence(s)",
						"anyOf": [
							{ "type": "string" },
							{ "type": "array", "items": { "type": "string" } }
						],
						"description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
					},
					"presence_penalty": {
						"title": "Penalize tokens on whether present.",
						"type": "number",
						"description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
						"default": 0
					},
					"frequency_penalty": {
						"title": "Penalize tokens on whether frequent.",
						"type": "number",
						"description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
						"default": 0
					},
					"other": {
						"title": "Other provider parameters",
						"type": "object",
						"description": "Other parameter values to be passed to the provider call.",
						"default": {}
					},
					"id": {
						"title": "Model config ID",
						"type": "string",
						"description": "Model config unique identifier generated by Humanloop."
					},
					"display_name": {
						"title": "Model config name",
						"type": "string",
						"description": "A friendly display name for the model config."
					},
					"project_id": {
						"title": "Project ID",
						"type": "string",
						"description": "String ID of project the model config belongs to. Starts with `pr_`."
					},
					"created_at": {
						"title": "Created At",
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"title": "Updated At",
						"type": "string",
						"format": "date-time"
					},
					"last_used": {
						"title": "Last Used",
						"type": "string",
						"format": "date-time"
					},
					"feedback_stats": {
						"title": "Feedback Stats",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectModelConfigFeedbackStatsResponse"
						}
					},
					"experiment_id": {
						"title": "Experiment ID",
						"type": "string",
						"description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment."
					}
				},
				"description": "Extends the core ModelConfig request object to include Humanloop generated\nidentifier and method for serializing response from ModelConfig domain object."
			}
		},
		"securitySchemes": {
			"OAuth2PasswordBearerHeaderOrCookie": {
				"type": "oauth2",
				"flows": { "password": { "scopes": {}, "tokenUrl": "/token" } }
			},
			"APIKeyHeader": { "type": "apiKey", "in": "header", "name": "X-API-KEY" }
		}
	}
}
